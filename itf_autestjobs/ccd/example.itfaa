// This ITF algo file was created using the GeCCo ITF translator
// Authors: J.A. Black, A. Koehn

// Created on: 04-03-2021 12:45

---- decl
index-space: ijklmn, Closed  , c
index-space: abcdef, External, e
index-space: CD, Core, C


// K-integral tensors
tensor: K:eecc[abij], K:eecc
tensor: K:cccc[klij], K:cccc

// J-integral tensors
tensor: J:eecc[bckj], J:eecc

// Special integral tensors
tensor: K4E1[abij], K4E1

// Tensor to send to Kext
tensor: INTpp[abij], INTpp

// Fock tensors
tensor: f:cc[kj], f:cc
tensor: f:ee[bc], f:ee

// Amplitude tensors
tensor: T:eecc[abik], T:eecc

// Residual tensors
tensor: R:eecc[abij], R:eecc

// Energy and DIIS scalars
tensor: ECC[], ECC

tensor: EDi2[], EDi2     // Direct 1st order energy
tensor: Nrm2[], Nrm2     // Doubles amplitude norm
tensor: Var2[], Var2     // Doubles residual norm
tensor: EMp2[], EMp2     // MP2 energy
tensor: ERef[], ERef     // Reference energy
tensor: ShiftP[], ShiftP

// Tensors needed to calculate the reference energy
tensor: f:CC[CC],   f:CC
tensor: CoreH[ii],  h:cc
tensor: CoreH[CC],  h:CC
tensor: Delta[ii],  Delta
tensor: DeltaC[CC], DeltaC

// Used in amplitude update
tensor: L2[abij],          !Create{type:plain}
tensor: C[abij],           !Create{type:plain}


// Intermediates
tensor: ITIN[abij],        !Create{type:disk}
tensor: X1[acik],          !Create{type:disk}
tensor: X2[cbkj],          !Create{type:disk}
tensor: X3[cdkl],          !Create{type:disk}
tensor: STIN70001bb[lj],   !Create{type:disk}
tensor: STIN80001abab[klij], !Create{type:disk}
tensor: STIN80001baab[klij], !Create{type:disk}
tensor: STIN90001bb[bd],   !Create{type:disk}
tensor: STIN100001aaaa[dali], !Create{type:disk}
tensor: STIN100001baab[dali], !Create{type:disk}
tensor: STIN100001baba[dali], !Create{type:disk}


---- code("Init_Amplitudes")
// Using MP2 amplitudes for starting guess
alloc EMp2[], Nrm2[]
for [i,j]:
   alloc T:eecc[abij]
   load K:eecc[**ij], f:ee[aa], f:cc[ii], f:cc[jj]
   .T:eecc[abij] -= K:eecc[abij]
   denom-scale T:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj]
   .EMp2[] += (2.0*T:eecc[abij] - T:eecc[baij]) K:eecc[abij]
   .Nrm2[] += (2.0*T:eecc[abij] - T:eecc[baij]) T:eecc[abij]
   drop f:cc[jj], f:cc[ii], f:ee[aa], K:eecc[**ij]
   store T:eecc[**ij]
store Nrm2[], EMp2[]


---- code ("Ref_Energy")
alloc ERef[]
// Closed-shell contribution
load f:cc[ii], CoreH[ii], Delta[ii]
.ERef += f:cc[ij] Delta[ij]
.ERef += CoreH[ij] Delta[ij]
drop Delta, CoreH, f:cc

// Core contribution
load f:CC[CC], CoreH[CC], DeltaC[CC]
.ERef += f:CC[CD] DeltaC[CD]
.ERef += CoreH[CD] DeltaC[CD]
drop DeltaC, CoreH, f:CC
store ERef[]




---- code("Update_Kext_Tensor")
load T:eecc[abij]
drop T:eecc[abij]


---- task("Update_Kext_Tensor")
init INTpp
save INTpp
.INTpp[abij] += T:eecc[abij]


---- code("Residual")
load T:eecc[abij]
drop T:eecc[abij]


---- task("Residual")
init R:eecc[abij], ECC[], ITIN[abij], X1[acik], X2[cbkj], X3[cdkl], STIN70001bb[lj], STIN80001abab[klij], STIN80001baab[klij], STIN90001bb[bd], STIN100001aaaa[dali], STIN100001baab[dali], STIN100001baba[dali]
save R:eecc[abij], ECC[]
.ITIN[abij] += .5*K:eecc[abij]
.ITIN[abij] -= f:cc[kj] T:eecc[abik]
.ITIN[abij] += f:ee[bc] T:eecc[acij]
.ITIN[abij] += .25*K:cccc[klij] T:eecc[abkl]
.ITIN[abij] += .25*K:cccc[lkij] T:eecc[ablk]
.X1[acik] += T:eecc[acik]
.X1[acik] -= T:eecc[caik]
.ITIN[abij] += K:eecc[cbkj] X1[acik]
.X2[cbkj] += K:eecc[cbkj]
.X2[cbkj] -= J:eecc[bckj]
.ITIN[abij] += X2[cbkj] T:eecc[acik]
.ITIN[abij] -= J:eecc[bcki] T:eecc[ackj]
.ITIN[abij] += .5*K4E1[abij]
.X3[cdkl] += K:eecc[cdkl]
.X3[cdkl] -= K:eecc[cdlk]
.STIN70001bb[lj] -= K:eecc[cdkl] T:eecc[cdkj]
.STIN70001bb[lj] -= K:eecc[dckl] T:eecc[dckj]
.STIN70001bb[lj] += X3[cdkl] X1[cdjk]
.ITIN[abij] += .5*STIN70001bb[lj] T:eecc[abil]
.STIN80001abab[klij] += K:eecc[cdkl] T:eecc[cdij]
.STIN80001abab[klij] += K:eecc[dckl] T:eecc[dcij]
.STIN80001baab[klij] -= K:eecc[cdlk] T:eecc[cdij]
.STIN80001baab[klij] -= K:eecc[dclk] T:eecc[dcij]
.ITIN[abij] += .125*STIN80001abab[klij] T:eecc[abkl]
.ITIN[abij] -= .125*STIN80001baab[klij] T:eecc[ablk]
.STIN90001bb[bd] -= K:eecc[cdkl] T:eecc[cbkl]
.STIN90001bb[bd] -= K:eecc[cdlk] T:eecc[cblk]
.STIN90001bb[bd] += X3[cdkl] X1[bckl]
.ITIN[abij] += .5*STIN90001bb[bd] T:eecc[adij]
.STIN100001aaaa[dali] += X3[cdkl] X1[acik]
.STIN100001aaaa[dali] += K:eecc[dclk] T:eecc[acik]
.STIN100001baab[dali] += K:eecc[dckl] T:eecc[acki]
.STIN100001baba[dali] += K:eecc[cdkl] X1[acik]
.STIN100001baba[dali] += X3[cdkl] T:eecc[acik]
.ITIN[abij] += .5*STIN100001aaaa[dali] T:eecc[dblj]
.ITIN[abij] += .5*STIN100001baba[dali] X1[bdjl]
.ITIN[abij] += .5*STIN100001baab[dalj] T:eecc[dbil]
.ECC[] += .5*X3[abij] X1[abij]
.ECC[] += .5*K:eecc[abij] T:eecc[abij]
.ECC[] += .5*K:eecc[baij] T:eecc[baij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
---- code("Update_Amplitudes")
// Update doubles
alloc EDi2[], Nrm2[], Var2[]
load R:eecc[abij], K:eecc[abij]
load T:eecc[abij]
load f:ee[aa], f:cc[ii], ShiftP[]
denom-scale R:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj] + ShiftP[]
drop ShiftP[], f:cc[ii], f:ee[aa]

.T:eecc[abij] -= R:eecc[abij]

alloc C[abij]
.C[abij] += T:eecc[abij]
.EDi2 += (2.0*C[abij] - C[baij]) K:eecc[abij]
.Nrm2 += (2.0*C[abij] - C[baij]) C[abij]
drop C[abij]

.Var2 += (2.0*R:eecc[abij] - R:eecc[baij]) R:eecc[abij]

store T:eecc[abij]
drop K:eecc[abij], R:eecc[abij]
store Var2[], Nrm2[], EDi2[]

---- end
