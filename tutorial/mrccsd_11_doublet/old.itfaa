// This ITF algo file was created using the GeCCo ITF translator
// Author: J.A. Black

// Created on: 07-01-2021 10:17

---- decl
index-space: pqrstuvw, Active  , a
index-space: ijkl    , Closed  , c
index-space: gh      , ClosedF , f
index-space: abcd    , External, e
index-space: mno     , Internal, i

index-space: I       , ConfigI0, I

tensor: Ym1[qp],  !Create{type:disk}

// K-integral tensors
tensor: K:aaaa[pqrs], K:aaaa
tensor: K:aaac[pqri], K:aaac
tensor: K:aacc[qpkj], K:aacc
tensor: K:ccca[kjip], K:ccca
tensor: K:cccc[klij], K:cccc
tensor: K:eaaa[apqr], K:eaaa
tensor: K:eaac[aqrk], K:eaac
tensor: K:eaca[apiq], K:eaca
tensor: K:eacc[bqik], K:eacc
tensor: K:eccc[akij], K:eccc
tensor: K:eeaa[cbpq], K:eeaa
tensor: K:eeac[capi], K:eeac
tensor: K:eecc[abij], K:eecc

// J-integral tensors
tensor: J:aacc[pqkj], J:aacc
tensor: J:eacc[bqki], J:eacc
tensor: J:eeaa[bcpq], J:eeaa
tensor: J:eeca[caip], J:eeca
tensor: J:eecc[bckj], J:eecc

// Special integral tensors
tensor: K4E1[abij], K4E1
tensor: K4E2[abqi], K4E2
tensor: K4C[abmn], K4C

// Tensor to send to Kext
tensor: INTpp[abmn], INTpp
tensor: INTpp1[abmi], !Create{type:disk}, INTpp1

tensor: deltaai[pm], DeltaActInt
tensor: deltaci[im], DeltaCloInt

// Fock tensors
tensor: f:aa[pq], f:aa
tensor: f:ac[pi], f:ac
tensor: f:cc[kj], f:cc
tensor: f:ea[ap], f:ea
tensor: f:ec[ai], f:ec
tensor: f:ee[bc], f:ee

// Amplitude tensors
tensor: T:ac[pj], T:ac
tensor: T:ea[bq], T:ea
tensor: T:ec[bk], T:ec
tensor: T:eaac[apqi], T:eaac
tensor: T:eaca[apiq], T:eaca
tensor: T:eacc[brik], T:eacc
tensor: T:eeac[baqk], T:eeac
tensor: T:eecc[abik], T:eecc

// Residual tensors
tensor: R:eecc[abij], R:eecc
tensor: R:eeac[abpi], R:eeac
tensor: R:eacc[apij], R:eacc
tensor: R:eaca[aqip], R:eaca
tensor: R:eaac[aqpi], R:eaac
tensor: R:ec[ai], R:ec
tensor: R:ea[ap], R:ea
tensor: R:ac[pi], R:ac

// Residuals not used in the code
tensor: R:I[I], R:I
tensor: R:aacc[pqij], R:aacc
tensor: R:aaac[pqri], R:aaac
tensor: R:eaaa[apqr], R:eaaa
tensor: R:eeaa[abpq], R:eeaa

// Amplitudes not used in the code
tensor: T:I[I], T:I
tensor: T:aacc[pqij], T:aacc
tensor: T:aaac[pqri], T:aaac
tensor: T:eaaa[apqr], T:eaaa
tensor: T:eeaa[abpq], T:eeaa

// Energy and DIIS scalars
tensor: ECC[], ECC
tensor: EDi1[], EDi1     // Direct 1st order energy
tensor: Nrm1[], Nrm1     // Singles amplitude norm
tensor: Var1[], Var1     // Singles residual norm
tensor: EDi2[], EDi2     // Direct 1st order energy
tensor: Nrm2[], Nrm2     // Doubles amplitude norm
tensor: Var2[], Var2     // Doubles residual norm

// Fock matricies, including core orbitals
tensor: fc:aa[pq], fc:aa
tensor: fc:cc[ki], fc:cc
tensor: fc:ea[aq], fc:ea
tensor: fc:ec[ai], fc:ec
tensor: fc:ee[ab], fc:ee
tensor: fc:ca[ip], fc:ca

tensor: J:ecca[aijp]
tensor: J:ecaa[aipq]
tensor: J:eaaa[apqr]
tensor: J:ccaa[ijpq]
tensor: J:caaa[ipqr]
tensor: J:ccca[ijkp]
tensor: J:eccc[aijk]
tensor: K:ccaa[ijpq]
tensor: K:ecaa[aipq]

// Effective Fock matricies
tensor: g:aa[pq]
tensor: g:ac[pi]
tensor: g:cc[ij]
tensor: g:ea[ap]
tensor: g:ec[ai]
tensor: g:ee[ab]

// Resuced density tensors (Icc-Icc coupling-coefficients)
// these are created on C++ side in CreateMrciTensors method
tensor: Dm1[pp],         DDm1
tensor: Dm2[pppp],       DDm2
tensor: Dm3[pppppp],     DDm3
tensor: Dm1H[pp],        DHm1
tensor: Dm2H[pppp],      DHm2
tensor: Dm3H[pppppp],    DHm3

// Non-disk density matrix drivers
// Can be loaded, but can not be stored.
// spec:<Ref|+-+-|Ref> means that Dm2X[pqrs] = <Ref|E^p_q R^r_s|Ref>
tensor: Dm2X[pppp],      !Create{type:cc-drv; spec:<Ref|+-+-|Ref>; irrep:0;}
tensor: Dm3X[pppppp],    !Create{type:cc-drv; spec:<Ref|+-+-+-|Ref>; irrep:0;}
tensor: Dm2HX[pppp],     !Create{type:cc-drv; spec:<Ref|/+/-/+/-|Ref>; irrep:0;}
tensor: Dm3HX[pppppp],   !Create{type:cc-drv; spec:<Ref|/+/-/+/-/+/-|Ref>; irrep:0;}

// Delta tensors
tensor: deltacc[ij],      DeltaCloClo
tensor: deltaaa[pq],      DeltaActAct
tensor: delta4[pppp],     !Create{type:plain}, Delta4  // Intermediate rank4 delta tensor

// Overlap tensors labeled by the exciation class
tensor: S1:I1[pp],       S1:I1
tensor: S2:I1[pppppp],   S2:I1
tensor: S3:I1[pppp],     S3:I1
tensor: S2:I2[pppp],     S2:I2
tensor: S1:S0[pp],       S1:S0
tensor: S2:S0[pppppp],   S2:S0
tensor: S3:S0[pppp],     S3:S0
tensor: S2:S1[pppp],     S2:S1
tensor: S3:S1[pp],       S3:S1
tensor: S2:S2[pp],       S2:S2
tensor: S2:P0[pppp],     S2:P0
tensor: S2:P1[pp],       S2:P1
tensor: I1[pppp], !Create{type:plain}
tensor: I2[pppp], !Create{type:plain}
tensor: I3[pppppp], !Create{type:plain}

// Orthogonal residuals
tensor: OR:I[I], OR:I
tensor: OR:ac[pi], OR:ac
tensor: OR:ec[ai], OR:ec
tensor: OR:ea[ap], OR:ea
tensor: OR:aacc[pqij], OR:aacc
tensor: OR:aaac[pqri], OR:aaac
tensor: OR:eacc[apij], OR:eacc
tensor: OR:eaac[apqi], OR:eaac
tensor: OR:eaca[apiq], OR:eaca
tensor: OR:eaaa[apqr], OR:eaaa
tensor: OR:eecc[abij], OR:eecc
tensor: OR:eeac[abpi], OR:eeac
tensor: OR:eeaa[abpq], OR:eeaa

// Orthogonal amplitudes
tensor: OT:I[I], OT:I
tensor: OT:ac[pi], OT:ac
tensor: OT:ec[ai], OT:ec
tensor: OT:ea[ap], OT:ea
tensor: OT:aacc[pqij], OT:aacc
tensor: OT:aaac[pqri], OT:aaac
tensor: OT:eacc[apij], OT:eacc
tensor: OT:eaac[apqi], OT:eaac
tensor: OT:eaca[apiq], OT:eaca
tensor: OT:eaaa[apqr], OT:eaaa
tensor: OT:eecc[abij], OT:eecc
tensor: OT:eeac[abpi], OT:eeac
tensor: OT:eeaa[abpq], OT:eeaa

// Active preconditioner blocks
tensor: A1[pp],    !Create{type:disk; sym:+01}
//tensor: A2[ppppp], !Create{type:disk; sym:012/345}
//tensor: A3[pppp], !Create{type:disk; sym:01/23}
tensor: A4[pp],    !Create{type:disk; sym:+01}
//tensor: A5[pppppp],  !Create{type:disk; sym:012/345}
//tensor: A6[pppp], !Create{type:disk; sym:01/23}
tensor: gminus[ij],!Create{type:disk; sym:+01}

tensor: ShiftS[], ShiftS
tensor: ShiftP[], ShiftP

// Intermediates
tensor: ITIN[abij],        !Create{type:plain}
tensor: STIN0001bb[kj],    !Create{type:plain}
tensor: STIN0001bb[bc],    !Create{type:plain}
tensor: STIN0001abab[klij], !Create{type:plain}
tensor: STIN0001baab[klij], !Create{type:plain}
tensor: STIN0001abab[abij], !Create{type:plain}
tensor: STIN0001abba[abij], !Create{type:plain}
tensor: STIN0001bb[bk],    !Create{type:plain}
tensor: STIN0001abab[qkji], !Create{type:plain}
tensor: STIN0001baab[qkji], !Create{type:plain}
tensor: STIN0001baab[bcpj], !Create{type:plain}
tensor: STIN0001baba[bcpj], !Create{type:plain}
tensor: STIN0001bbbb[bcpj], !Create{type:plain}
tensor: STIN0001bb[pj],    !Create{type:plain}
tensor: STIN0001abab[abqi], !Create{type:plain}
tensor: STIN0001abab[bpik], !Create{type:plain}
tensor: STIN0001baab[bpik], !Create{type:plain}
tensor: STIN0001abab[abpr], !Create{type:plain}
tensor: STIN0001aaaa[aprk], !Create{type:plain}
tensor: STIN0001abab[aprk], !Create{type:plain}
tensor: STIN0001baab[aprk], !Create{type:plain}
tensor: STIN0001aa[cj],    !Create{type:plain}
tensor: STIN0001abba[aqij], !Create{type:plain}
tensor: STIN0001aa[qj],    !Create{type:plain}
tensor: STIN0001aa[ji],    !Create{type:plain}
tensor: STIN0001aa[ab],    !Create{type:plain}
tensor: STIN0001aa[bp],    !Create{type:plain}
tensor: STIN0001bb[bp],    !Create{type:plain}
tensor: STIN0001aaaa[rpjk], !Create{type:plain}
tensor: STIN0001abba[rpjk], !Create{type:plain}
tensor: STIN0001baba[rpjk], !Create{type:plain}
tensor: STIN0001aaaa[pqri], !Create{type:plain}
tensor: STIN0001abba[pqri], !Create{type:plain}
tensor: STIN0001aa[pq],    !Create{type:plain}
tensor: STIN0001[],        !Create{type:scalar}


---- code("Init_Amplitudes")
alloc T:ac[pj]
store T:ac[pj]
alloc T:ea[bq]
store T:ea[bq]
alloc T:ec[bk]
store T:ec[bk]
alloc T:eaac[apqi]
store T:eaac[apqi]
alloc T:eaca[apiq]
store T:eaca[apiq]
alloc T:eacc[brik]
store T:eacc[brik]
alloc T:eeac[baqk]
store T:eeac[baqk]
alloc T:eecc[abik]
store T:eecc[abik]


---- code("Update_Kext_Tensor")
// Intermediate to pass to Kext
alloc INTpp1[abmi]
alloc INTpp[abmn]
load deltaci[im], deltaai[pm]
load T:eecc[abij], T:eeac[abpi]
.INTpp1[abmj] += T:eecc[abij] deltaci[im]
.INTpp1[abmi] += T:eeac[abpi] deltaai[pm]
.INTpp[abmn] += INTpp1[abmj] deltaci[jn]
drop T:eeac[abpi], T:eecc[abij]
drop deltaai[pm], deltaci[im]
store INTpp[abmn]
store INTpp1[abmi]


---- code("Transform_K")
alloc K4E1[abij], K4E2[abpi]
alloc INTpp1[abmi]
load deltaci[im], deltaai[pm]
load K4C[abmn]
.INTpp1[abmj] += K4C[abmn] deltaci[jn]
.K4E1[abij] += INTpp1[abmj] deltaci[im]
.K4E2[abpi] += INTpp1[abmi] deltaai[pm]
drop K4C[abmn]
drop deltaai[pm], deltaci[im]
drop INTpp1[abmi]
store K4E2[abpi], K4E1[abij]


---- code("Residual")
alloc R:eecc[abij]
alloc ITIN[abij]
load K:eecc[abij]
.ITIN[abij] += .5*K:eecc[abij]
drop K:eecc[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc STIN0001bb[kj], ITIN[abij]
load f:cc[kj]
.STIN0001bb[kj] += f:cc[kj]
drop f:cc[kj]
load T:eecc[abik]
.ITIN[abij] -= STIN0001bb[kj] T:eecc[abik]
drop T:eecc[abik]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[kj]
alloc STIN0001bb[bc], ITIN[abij]
load f:ee[bc]
.STIN0001bb[bc] += f:ee[bc]
drop f:ee[bc]
load T:eecc[acij]
.ITIN[abij] += STIN0001bb[bc] T:eecc[acij]
drop T:eecc[acij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[bc]
alloc STIN0001abab[klij], STIN0001baab[klij], ITIN[abij]
load K:cccc[klij]
.STIN0001abab[klij] += K:cccc[klij]
drop K:cccc[klij]
load K:cccc[lkij]
.STIN0001baab[klij] -= K:cccc[lkij]
drop K:cccc[lkij]
load T:eecc[abkl]
.ITIN[abij] += .25*STIN0001abab[klij] T:eecc[abkl]
drop T:eecc[abkl]
load T:eecc[ablk]
.ITIN[abij] -= .25*STIN0001baab[klij] T:eecc[ablk]
drop T:eecc[ablk]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baab[klij], STIN0001abab[klij]
alloc STIN0001abab[abij], STIN0001abba[abij], ITIN[abij]
load K:eecc[cbkj], T:eecc[acik]
.STIN0001abab[abij] += K:eecc[cbkj] (T:eecc[acik] - T:eecc[caik])
drop T:eecc[acik], K:eecc[cbkj]
load K:eecc[cbkj], J:eecc[bckj], T:eecc[acik]
.STIN0001abab[abij] += (K:eecc[cbkj] - J:eecc[bckj]) T:eecc[acik]
drop T:eecc[acik], J:eecc[bckj], K:eecc[cbkj]
load J:eecc[bckj], T:eecc[acki]
.STIN0001abba[abij] += J:eecc[bckj] T:eecc[acki]
drop T:eecc[acki], J:eecc[bckj]
.ITIN[abij] += STIN0001abab[abij]
.ITIN[abij] -= STIN0001abba[abji]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001abba[abij], STIN0001abab[abij]
alloc STIN0001bb[kj], ITIN[abij]
load Ym1[qp], J:aacc[pqkj]
.STIN0001bb[kj] -= Ym1[qp] J:aacc[pqkj]
drop J:aacc[pqkj], Ym1[qp]
load Ym1[qp], K:aacc[qpkj], J:aacc[pqkj]
.STIN0001bb[kj] += Ym1[qp] (K:aacc[qpkj] - J:aacc[pqkj])
drop J:aacc[pqkj], K:aacc[qpkj], Ym1[qp]
load T:eecc[abik]
.ITIN[abij] += STIN0001bb[kj] T:eecc[abik]
drop T:eecc[abik]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[kj]
alloc STIN0001abab[abij], ITIN[abij]
load K4E1[abij]
.STIN0001abab[abij] += K4E1[abij]
drop K4E1[abij]
.ITIN[abij] += .5*STIN0001abab[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001abab[abij]
alloc STIN0001bb[bc], ITIN[abij]
load Ym1[qp], J:eeaa[bcpq]
.STIN0001bb[bc] += Ym1[qp] J:eeaa[bcpq]
drop J:eeaa[bcpq], Ym1[qp]
load Ym1[qp], J:eeaa[bcpq], K:eeaa[cbpq]
.STIN0001bb[bc] += Ym1[qp] (J:eeaa[bcpq] - K:eeaa[cbpq])
drop K:eeaa[cbpq], J:eeaa[bcpq], Ym1[qp]
load T:eecc[acij]
.ITIN[abij] += STIN0001bb[bc] T:eecc[acij]
drop T:eecc[acij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[bc]
alloc STIN0001bb[bk], ITIN[abij]
load T:ec[bk]
.STIN0001bb[bk] += T:ec[bk]
drop T:ec[bk]
load K:eccc[akij]
.ITIN[abij] -= K:eccc[akij] STIN0001bb[bk]
drop K:eccc[akij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[bk]
alloc STIN0001abab[qkji], STIN0001baab[qkji], ITIN[abij]
load Ym1[qp], K:ccca[kjip]
.STIN0001abab[qkji] += Ym1[qp] K:ccca[kjip]
drop K:ccca[kjip], Ym1[qp]
load Ym1[qp], K:ccca[kijp]
.STIN0001baab[qkji] -= Ym1[qp] K:ccca[kijp]
drop K:ccca[kijp], Ym1[qp]
load T:eeac[baqk]
.ITIN[abij] += .5*STIN0001abab[qkji] T:eeac[baqk]
drop T:eeac[baqk]
load T:eeac[abqk]
.ITIN[abij] -= .5*STIN0001baab[qkji] T:eeac[abqk]
drop T:eeac[abqk]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baab[qkji], STIN0001abab[qkji]
alloc STIN0001baab[bcpj], STIN0001baba[bcpj], STIN0001bbbb[bcpj], ITIN[abij]
load T:eeac[cbqj], Ym1[qp]
.STIN0001baab[bcpj] -= T:eeac[cbqj] Ym1[qp]
drop Ym1[qp], T:eeac[cbqj]
load T:eeac[bcqj], Ym1[qp]
.STIN0001baba[bcpj] += T:eeac[bcqj] Ym1[qp]
drop Ym1[qp], T:eeac[bcqj]
load T:eeac[bcqj], Ym1[qp]
.STIN0001bbbb[bcpj] += (T:eeac[bcqj] - T:eeac[cbqj]) Ym1[qp]
drop Ym1[qp], T:eeac[bcqj]
load J:eeca[caip], K:eeac[capi]
.ITIN[abij] += STIN0001baab[bcpj] (J:eeca[caip] - K:eeac[capi])
drop K:eeac[capi], J:eeca[caip]
load K:eeac[capi]
.ITIN[abij] -= STIN0001bbbb[bcpj] K:eeac[capi]
drop K:eeac[capi]
load J:eeca[cajp]
.ITIN[abij] -= STIN0001baba[bcpi] J:eeca[cajp]
drop J:eeca[cajp]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bbbb[bcpj], STIN0001baba[bcpj], STIN0001baab[bcpj]
alloc STIN0001bb[pj], ITIN[abij]
load T:ac[pj]
.STIN0001bb[pj] += T:ac[pj]
drop T:ac[pj]
load K:eeac[bapi]
.ITIN[abij] += K:eeac[bapi] STIN0001bb[pj]
drop K:eeac[bapi]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[pj]
store R:eecc[abij]

alloc R:eeac[abpi]
load K:eeac[abqi], Ym1[qp]
.R:eeac[abpi] += K:eeac[abqi] Ym1[qp]
drop Ym1[qp], K:eeac[abqi]
alloc STIN0001abab[abqi]
load f:cc[ki], T:eeac[abqk]
.STIN0001abab[abqi] += f:cc[ki] T:eeac[abqk]
drop T:eeac[abqk], f:cc[ki]
load Ym1[qp]
.R:eeac[abpi] -= STIN0001abab[abqi] Ym1[qp]
drop Ym1[qp]
drop STIN0001abab[abqi]
alloc STIN0001abab[abqi], STIN0001baab[abqi]
load f:ee[ac], T:eeac[cbqi]
.STIN0001abab[abqi] -= f:ee[ac] T:eeac[cbqi]
drop T:eeac[cbqi], f:ee[ac]
load f:ee[ac], T:eeac[bcqi]
.STIN0001baab[abqi] += f:ee[ac] T:eeac[bcqi]
drop T:eeac[bcqi], f:ee[ac]
load Ym1[qp]
.R:eeac[abpi] -= STIN0001abab[abqi] Ym1[qp]
drop Ym1[qp]
load Ym1[qp]
.R:eeac[abpi] += STIN0001baab[baqi] Ym1[qp]
drop Ym1[qp]
drop STIN0001baab[abqi], STIN0001abab[abqi]
alloc STIN0001abab[abqi], STIN0001baab[abqi]
load K:eecc[cbki], T:eeac[acqk]
.STIN0001abab[abqi] += K:eecc[cbki] (T:eeac[acqk] - T:eeac[caqk])
drop T:eeac[acqk], K:eecc[cbki]
load K:eecc[cbki], J:eecc[bcki], T:eeac[acqk]
.STIN0001abab[abqi] += (K:eecc[cbki] - J:eecc[bcki]) T:eeac[acqk]
drop T:eeac[acqk], J:eecc[bcki], K:eecc[cbki]
load J:eecc[bcki], T:eeac[caqk]
.STIN0001baab[abqi] += J:eecc[bcki] T:eeac[caqk]
drop T:eeac[caqk], J:eecc[bcki]
load Ym1[qp]
.R:eeac[abpi] += STIN0001abab[abqi] Ym1[qp]
drop Ym1[qp]
load Ym1[qp]
.R:eeac[abpi] -= STIN0001baab[baqi] Ym1[qp]
drop Ym1[qp]
drop STIN0001baab[abqi], STIN0001abab[abqi]
alloc STIN0001abab[abqi]
load K4E2[abqi]
.STIN0001abab[abqi] += K4E2[abqi]
drop K4E2[abqi]
load Ym1[qp]
.R:eeac[abpi] += STIN0001abab[abqi] Ym1[qp]
drop Ym1[qp]
drop STIN0001abab[abqi]
alloc STIN0001abab[bpik], STIN0001baab[bpik]
load K:eacc[bqik], Ym1[qp]
.STIN0001abab[bpik] += K:eacc[bqik] Ym1[qp]
drop Ym1[qp], K:eacc[bqik]
load J:eacc[bqki], Ym1[qp]
.STIN0001baab[bpik] -= J:eacc[bqki] Ym1[qp]
drop Ym1[qp], J:eacc[bqki]
load T:ec[ak]
.R:eeac[abpi] -= STIN0001abab[bpik] T:ec[ak]
drop T:ec[ak]
load T:ec[bk]
.R:eeac[abpi] += STIN0001baab[apik] T:ec[bk]
drop T:ec[bk]
drop STIN0001baab[bpik], STIN0001abab[bpik]
alloc STIN0001abab[plki], STIN0001baab[plki]
load K:ccca[lkiq], Ym1[qp]
.STIN0001abab[plki] += K:ccca[lkiq] Ym1[qp]
drop Ym1[qp], K:ccca[lkiq]
load K:ccca[kliq], Ym1[qp]
.STIN0001baab[plki] -= K:ccca[kliq] Ym1[qp]
drop Ym1[qp], K:ccca[kliq]
load T:eecc[abkl]
.R:eeac[abpi] += .5*STIN0001abab[plki] T:eecc[abkl]
drop T:eecc[abkl]
load T:eecc[ablk]
.R:eeac[abpi] -= .5*STIN0001baab[plki] T:eecc[ablk]
drop T:eecc[ablk]
drop STIN0001baab[plki], STIN0001abab[plki]
alloc STIN0001abab[abqi], STIN0001baab[abqi]
load J:eeca[cbkq], T:eecc[acki]
.STIN0001abab[abqi] += J:eeca[cbkq] T:eecc[acki]
drop T:eecc[acki], J:eeca[cbkq]
load K:eeac[bcqk], J:eeca[cbkq], T:eecc[caki]
.STIN0001baab[abqi] += (K:eeac[bcqk] - J:eeca[cbkq]) T:eecc[caki]
drop T:eecc[caki], J:eeca[cbkq], K:eeac[bcqk]
load K:eeac[bcqk], T:eecc[acik]
.STIN0001baab[abqi] += K:eeac[bcqk] (T:eecc[acik] - T:eecc[caik])
drop T:eecc[acik], K:eeac[bcqk]
load Ym1[qp]
.R:eeac[abpi] -= STIN0001abab[abqi] Ym1[qp]
drop Ym1[qp]
load Ym1[qp]
.R:eeac[abpi] += STIN0001baab[baqi] Ym1[qp]
drop Ym1[qp]
drop STIN0001baab[abqi], STIN0001abab[abqi]
alloc STIN0001abab[abpr]
load K:eeaa[abqr], Ym1[qp]
.STIN0001abab[abpr] += K:eeaa[abqr] Ym1[qp]
drop Ym1[qp], K:eeaa[abqr]
load T:ac[ri]
.R:eeac[abpi] += STIN0001abab[abpr] T:ac[ri]
drop T:ac[ri]
drop STIN0001abab[abpr]
alloc STIN0001aaaa[aprk], STIN0001abab[aprk], STIN0001baab[aprk]
load K:eaac[aqrk], Ym1[qp]
.STIN0001aaaa[aprk] += (K:eaac[aqrk] - K:eaac[arqk]) Ym1[qp]
drop Ym1[qp], K:eaac[aqrk]
load K:eaac[aqrk], Ym1[qp]
.STIN0001abab[aprk] += K:eaac[aqrk] Ym1[qp]
drop Ym1[qp], K:eaac[aqrk]
load K:eaac[arqk], Ym1[qp]
.STIN0001baab[aprk] -= K:eaac[arqk] Ym1[qp]
drop Ym1[qp], K:eaac[arqk]
load T:eacc[brik]
.R:eeac[abpi] -= STIN0001aaaa[aprk] T:eacc[brik]
drop T:eacc[brik]
load T:eacc[brik]
.R:eeac[abpi] -= STIN0001baab[aprk] (T:eacc[brik] - T:eacc[brki])
drop T:eacc[brik]
load T:eacc[arki]
.R:eeac[abpi] -= STIN0001abab[bprk] T:eacc[arki]
drop T:eacc[arki]
drop STIN0001baab[aprk], STIN0001abab[aprk], STIN0001aaaa[aprk]
store R:eeac[abpi]

alloc R:eacc[apij]
load K:eacc[apij]
.R:eacc[apij] += K:eacc[apij]
drop K:eacc[apij]
load Ym1[pq], K:eacc[aqij]
.R:eacc[apij] -= Ym1[pq] K:eacc[aqij]
drop K:eacc[aqij], Ym1[pq]
alloc STIN0001abab[pkji]
load K:ccca[kjip]
.STIN0001abab[pkji] += K:ccca[kjip]
drop K:ccca[kjip]
load T:ec[ak]
.R:eacc[apij] -= STIN0001abab[pkji] T:ec[ak]
drop T:ec[ak]
drop STIN0001abab[pkji]
alloc STIN0001abab[pkji]
load Ym1[pq], K:ccca[kjiq]
.STIN0001abab[pkji] += Ym1[pq] K:ccca[kjiq]
drop K:ccca[kjiq], Ym1[pq]
load T:ec[ak]
.R:eacc[apij] += STIN0001abab[pkji] T:ec[ak]
drop T:ec[ak]
drop STIN0001abab[pkji]
alloc STIN0001aa[cj], STIN0001bb[cj]
load T:ec[cj]
.STIN0001aa[cj] += T:ec[cj]
drop T:ec[cj]
load T:ec[cj]
.STIN0001bb[cj] += T:ec[cj]
drop T:ec[cj]
load K:eeac[capi]
.R:eacc[apij] += K:eeac[capi] STIN0001bb[cj]
drop K:eeac[capi]
load J:eeca[cajp]
.R:eacc[apij] += J:eeca[cajp] STIN0001aa[ci]
drop J:eeca[cajp]
drop STIN0001bb[cj], STIN0001aa[cj]
alloc STIN0001abab[aqij], STIN0001abba[aqij]
load K:eeac[caqi], T:ec[cj]
.STIN0001abab[aqij] -= K:eeac[caqi] T:ec[cj]
drop T:ec[cj], K:eeac[caqi]
load J:eeca[caiq], T:ec[cj]
.STIN0001abba[aqij] += J:eeca[caiq] T:ec[cj]
drop T:ec[cj], J:eeca[caiq]
load Ym1[pq]
.R:eacc[apij] += Ym1[pq] STIN0001abab[aqij]
drop Ym1[pq]
load Ym1[pq]
.R:eacc[apij] -= Ym1[pq] STIN0001abba[aqji]
drop Ym1[pq]
drop STIN0001abba[aqij], STIN0001abab[aqij]
alloc STIN0001bb[pk]
load T:ac[pk]
.STIN0001bb[pk] += T:ac[pk]
drop T:ac[pk]
load K:eccc[akij]
.R:eacc[apij] -= K:eccc[akij] STIN0001bb[pk]
drop K:eccc[akij]
drop STIN0001bb[pk]
alloc STIN0001aa[qj], STIN0001bb[qj]
load T:ac[qj]
.STIN0001aa[qj] += T:ac[qj]
drop T:ac[qj]
load T:ac[qj]
.STIN0001bb[qj] += T:ac[qj]
drop T:ac[qj]
load K:eaca[apiq]
.R:eacc[apij] += K:eaca[apiq] STIN0001bb[qj]
drop K:eaca[apiq]
load K:eaac[apqj]
.R:eacc[apij] += K:eaac[apqj] STIN0001aa[qi]
drop K:eaac[apqj]
drop STIN0001bb[qj], STIN0001aa[qj]
alloc STIN0001abab[aqij], STIN0001abba[aqij]
load K:eaca[aqir], T:ac[rj]
.STIN0001abab[aqij] -= K:eaca[aqir] T:ac[rj]
drop T:ac[rj], K:eaca[aqir]
load K:eaac[aqri], T:ac[rj]
.STIN0001abba[aqij] += K:eaac[aqri] T:ac[rj]
drop T:ac[rj], K:eaac[aqri]
load Ym1[pq]
.R:eacc[apij] += Ym1[pq] STIN0001abab[aqij]
drop Ym1[pq]
load Ym1[pq]
.R:eacc[apij] -= Ym1[pq] STIN0001abba[aqji]
drop Ym1[pq]
drop STIN0001abba[aqij], STIN0001abab[aqij]
store R:eacc[apij]

alloc R:eaca[aqip]
load Ym1[qp], f:ec[ai]
.R:eaca[aqip] += Ym1[qp] f:ec[ai]
drop f:ec[ai], Ym1[qp]
store R:eaca[aqip]

alloc R:eaac[aqpi]
load K:eaac[aqri], Ym1[rp]
.R:eaac[aqpi] += K:eaac[aqri] Ym1[rp]
drop Ym1[rp], K:eaac[aqri]
store R:eaac[aqpi]

load R:eaca[aqip]
load K:eaca[aqir], Ym1[rp]
.R:eaca[aqip] += K:eaca[aqir] Ym1[rp]
drop Ym1[rp], K:eaca[aqir]
store R:eaca[aqip]

alloc R:ec[ai]
load f:ec[ai]
.R:ec[ai] += f:ec[ai]
drop f:ec[ai]
load Ym1[qp], K:eaac[apqi], K:eaca[apiq]
.R:ec[ai] -= Ym1[qp] (K:eaac[apqi] - K:eaca[apiq])
drop K:eaca[apiq], K:eaac[apqi], Ym1[qp]
load Ym1[qp], K:eaca[apiq]
.R:ec[ai] += Ym1[qp] K:eaca[apiq]
drop K:eaca[apiq], Ym1[qp]
alloc STIN0001aa[ji]
load f:cc[ji]
.STIN0001aa[ji] += f:cc[ji]
drop f:cc[ji]
load T:ec[aj]
.R:ec[ai] -= STIN0001aa[ji] T:ec[aj]
drop T:ec[aj]
drop STIN0001aa[ji]
alloc STIN0001aa[ai]
load f:ee[ab], T:ec[bi]
.STIN0001aa[ai] += f:ee[ab] T:ec[bi]
drop T:ec[bi], f:ee[ab]
.R:ec[ai] += STIN0001aa[ai]
drop STIN0001aa[ai]
alloc STIN0001aa[ai]
load K:eecc[baji], J:eecc[abji], T:ec[bj]
.STIN0001aa[ai] += (K:eecc[baji] - J:eecc[abji]) T:ec[bj]
drop T:ec[bj], J:eecc[abji], K:eecc[baji]
load K:eecc[abij], T:ec[bj]
.STIN0001aa[ai] += K:eecc[abij] T:ec[bj]
drop T:ec[bj], K:eecc[abij]
.R:ec[ai] += STIN0001aa[ai]
drop STIN0001aa[ai]
alloc STIN0001aa[ji]
load Ym1[qp], K:aacc[qpji], J:aacc[pqji]
.STIN0001aa[ji] += Ym1[qp] (K:aacc[qpji] - J:aacc[pqji])
drop J:aacc[pqji], K:aacc[qpji], Ym1[qp]
load Ym1[qp], J:aacc[pqji]
.STIN0001aa[ji] -= Ym1[qp] J:aacc[pqji]
drop J:aacc[pqji], Ym1[qp]
load T:ec[aj]
.R:ec[ai] += STIN0001aa[ji] T:ec[aj]
drop T:ec[aj]
drop STIN0001aa[ji]
alloc STIN0001aa[ab]
load Ym1[qp], J:eeaa[abpq], K:eeaa[bapq]
.STIN0001aa[ab] += Ym1[qp] (J:eeaa[abpq] - K:eeaa[bapq])
drop K:eeaa[bapq], J:eeaa[abpq], Ym1[qp]
load Ym1[qp], J:eeaa[abpq]
.STIN0001aa[ab] += Ym1[qp] J:eeaa[abpq]
drop J:eeaa[abpq], Ym1[qp]
load T:ec[bi]
.R:ec[ai] += STIN0001aa[ab] T:ec[bi]
drop T:ec[bi]
drop STIN0001aa[ab]
alloc STIN0001aa[ai]
load K:eccc[bkji], T:eecc[abjk]
.STIN0001aa[ai] += .5*(K:eccc[bkji] - K:eccc[bjki]) (T:eecc[abjk] - T:eecc[bajk])
drop T:eecc[abjk], K:eccc[bkji]
load K:eccc[bjki], T:eecc[abjk]
.STIN0001aa[ai] -= .5*K:eccc[bjki] T:eecc[abjk]
drop T:eecc[abjk], K:eccc[bjki]
load K:eccc[bkji], T:eecc[abkj]
.STIN0001aa[ai] -= .5*K:eccc[bkji] T:eecc[abkj]
drop T:eecc[abkj], K:eccc[bkji]
.R:ec[ai] += STIN0001aa[ai]
drop STIN0001aa[ai]
alloc STIN0001aa[bp], STIN0001bb[bp]
load T:ea[bq], Ym1[qp]
.STIN0001aa[bp] += T:ea[bq] Ym1[qp]
drop Ym1[qp], T:ea[bq]
load T:ea[bq], Ym1[qp]
.STIN0001bb[bp] += T:ea[bq] Ym1[qp]
drop Ym1[qp], T:ea[bq]
load J:eeca[baip], K:eeac[bapi]
.R:ec[ai] -= STIN0001aa[bp] (J:eeca[baip] - K:eeac[bapi])
drop K:eeac[bapi], J:eeca[baip]
load K:eeac[bapi]
.R:ec[ai] += STIN0001bb[bp] K:eeac[bapi]
drop K:eeac[bapi]
drop STIN0001bb[bp], STIN0001aa[bp]
alloc STIN0001aa[pi]
load T:ac[pi]
.STIN0001aa[pi] += T:ac[pi]
drop T:ac[pi]
load f:ea[ap]
.R:ec[ai] += f:ea[ap] STIN0001aa[pi]
drop f:ea[ap]
drop STIN0001aa[pi]
alloc STIN0001aa[pj], STIN0001bb[pj]
load T:ac[pj]
.STIN0001aa[pj] += T:ac[pj]
drop T:ac[pj]
load T:ac[pj]
.STIN0001bb[pj] += T:ac[pj]
drop T:ac[pj]
load K:eacc[apij], J:eacc[apji]
.R:ec[ai] += (K:eacc[apij] - J:eacc[apji]) STIN0001aa[pj]
drop J:eacc[apji], K:eacc[apij]
load K:eacc[apij]
.R:ec[ai] += K:eacc[apij] STIN0001bb[pj]
drop K:eacc[apij]
drop STIN0001bb[pj], STIN0001aa[pj]
alloc STIN0001aa[pj], STIN0001bb[pj]
load Ym1[pq], T:ac[qj]
.STIN0001aa[pj] += Ym1[pq] T:ac[qj]
drop T:ac[qj], Ym1[pq]
load Ym1[pq], T:ac[qj]
.STIN0001bb[pj] += Ym1[pq] T:ac[qj]
drop T:ac[qj], Ym1[pq]
load K:eacc[apij], J:eacc[apji]
.R:ec[ai] -= (K:eacc[apij] - J:eacc[apji]) STIN0001aa[pj]
drop J:eacc[apji], K:eacc[apij]
load K:eacc[apij]
.R:ec[ai] -= K:eacc[apij] STIN0001bb[pj]
drop K:eacc[apij]
drop STIN0001bb[pj], STIN0001aa[pj]
alloc STIN0001aa[ar]
load Ym1[qp], K:eaaa[apqr]
.STIN0001aa[ar] += Ym1[qp] (K:eaaa[apqr] - K:eaaa[aprq])
drop K:eaaa[apqr], Ym1[qp]
load Ym1[qp], K:eaaa[aprq]
.STIN0001aa[ar] -= Ym1[qp] K:eaaa[aprq]
drop K:eaaa[aprq], Ym1[qp]
load T:ac[ri]
.R:ec[ai] -= STIN0001aa[ar] T:ac[ri]
drop T:ac[ri]
drop STIN0001aa[ar]
store R:ec[ai]

alloc R:ea[ap]
load f:ea[aq], Ym1[qp]
.R:ea[ap] += f:ea[aq] Ym1[qp]
drop Ym1[qp], f:ea[aq]
alloc STIN0001aa[aq]
load f:ee[ab], T:ea[bq]
.STIN0001aa[aq] += f:ee[ab] T:ea[bq]
drop T:ea[bq], f:ee[ab]
load Ym1[qp]
.R:ea[ap] += STIN0001aa[aq] Ym1[qp]
drop Ym1[qp]
drop STIN0001aa[aq]
alloc STIN0001aa[aq]
load K:eeac[abqj], J:eeca[bajq], T:ec[bj]
.STIN0001aa[aq] += (K:eeac[abqj] - J:eeca[bajq]) T:ec[bj]
drop T:ec[bj], J:eeca[bajq], K:eeac[abqj]
load K:eeac[abqj], T:ec[bj]
.STIN0001aa[aq] += K:eeac[abqj] T:ec[bj]
drop T:ec[bj], K:eeac[abqj]
load Ym1[qp]
.R:ea[ap] += STIN0001aa[aq] Ym1[qp]
drop Ym1[qp]
drop STIN0001aa[aq]
alloc STIN0001aa[aq]
load K:eacc[bqjk], T:eecc[abjk]
.STIN0001aa[aq] += .5*(K:eacc[bqjk] - K:eacc[bqkj]) (T:eecc[abjk] - T:eecc[bajk])
drop T:eecc[abjk], K:eacc[bqjk]
load K:eacc[bqkj], T:eecc[abjk]
.STIN0001aa[aq] -= .5*K:eacc[bqkj] T:eecc[abjk]
drop T:eecc[abjk], K:eacc[bqkj]
load K:eacc[bqjk], T:eecc[abkj]
.STIN0001aa[aq] -= .5*K:eacc[bqjk] T:eecc[abkj]
drop T:eecc[abkj], K:eacc[bqjk]
load Ym1[qp]
.R:ea[ap] += STIN0001aa[aq] Ym1[qp]
drop Ym1[qp]
drop STIN0001aa[aq]
alloc STIN0001aa[aq]
load f:ec[bj], T:eeac[abqj]
.STIN0001aa[aq] += f:ec[bj] (T:eeac[abqj] - T:eeac[baqj])
drop T:eeac[abqj], f:ec[bj]
load f:ec[bj], T:eeac[abqj]
.STIN0001aa[aq] += f:ec[bj] T:eeac[abqj]
drop T:eeac[abqj], f:ec[bj]
load Ym1[qp]
.R:ea[ap] += STIN0001aa[aq] Ym1[qp]
drop Ym1[qp]
drop STIN0001aa[aq]
alloc STIN0001aa[aq]
load K:eaac[aqrj], T:ac[rj]
.STIN0001aa[aq] += (K:eaac[aqrj] - K:eaac[arqj]) T:ac[rj]
drop T:ac[rj], K:eaac[aqrj]
load K:eaac[arqj], T:ac[rj]
.STIN0001aa[aq] -= K:eaac[arqj] T:ac[rj]
drop T:ac[rj], K:eaac[arqj]
load Ym1[qp]
.R:ea[ap] -= STIN0001aa[aq] Ym1[qp]
drop Ym1[qp]
drop STIN0001aa[aq]
alloc STIN0001aaaa[rpjk], STIN0001abba[rpjk], STIN0001baba[rpjk]
load K:aacc[qrjk], Ym1[qp]
.STIN0001aaaa[rpjk] += (K:aacc[qrjk] - K:aacc[qrkj]) Ym1[qp]
drop Ym1[qp], K:aacc[qrjk]
load K:aacc[qrjk], Ym1[qp]
.STIN0001abba[rpjk] += K:aacc[qrjk] Ym1[qp]
drop Ym1[qp], K:aacc[qrjk]
load K:aacc[qrkj], Ym1[qp]
.STIN0001baba[rpjk] -= K:aacc[qrkj] Ym1[qp]
drop Ym1[qp], K:aacc[qrkj]
load T:eacc[arjk]
.R:ea[ap] -= .5*STIN0001aaaa[rpjk] (T:eacc[arjk] - T:eacc[arkj])
drop T:eacc[arjk]
load T:eacc[arjk]
.R:ea[ap] -= .5*STIN0001abba[rpjk] T:eacc[arjk]
drop T:eacc[arjk]
load T:eacc[arkj]
.R:ea[ap] += .5*STIN0001baba[rpjk] T:eacc[arkj]
drop T:eacc[arkj]
drop STIN0001baba[rpjk], STIN0001abba[rpjk], STIN0001aaaa[rpjk]
store R:ea[ap]

alloc R:ac[pi]
load f:ac[pi]
.R:ac[pi] += f:ac[pi]
drop f:ac[pi]
load Ym1[pq], f:ac[qi]
.R:ac[pi] -= Ym1[pq] f:ac[qi]
drop f:ac[qi], Ym1[pq]
load Ym1[rq], K:aaac[pqri]
.R:ac[pi] -= Ym1[rq] (K:aaac[pqri] - K:aaac[qpri])
drop K:aaac[pqri], Ym1[rq]
load Ym1[rq], K:aaac[qpri]
.R:ac[pi] += Ym1[rq] K:aaac[qpri]
drop K:aaac[qpri], Ym1[rq]
alloc STIN0001aa[pi]
load f:ea[bp], T:ec[bi]
.STIN0001aa[pi] += f:ea[bp] T:ec[bi]
drop T:ec[bi], f:ea[bp]
.R:ac[pi] += STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aa[pi]
load K:eacc[bpji], J:eacc[bpji], T:ec[bj]
.STIN0001aa[pi] += (K:eacc[bpji] - J:eacc[bpji]) T:ec[bj]
drop T:ec[bj], J:eacc[bpji], K:eacc[bpji]
load K:eacc[bpji], T:ec[bj]
.STIN0001aa[pi] += K:eacc[bpji] T:ec[bj]
drop T:ec[bj], K:eacc[bpji]
.R:ac[pi] += STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aa[qi]
load K:eacc[bqji], J:eacc[bqji], T:ec[bj]
.STIN0001aa[qi] += (K:eacc[bqji] - J:eacc[bqji]) T:ec[bj]
drop T:ec[bj], J:eacc[bqji], K:eacc[bqji]
load K:eacc[bqji], T:ec[bj]
.STIN0001aa[qi] += K:eacc[bqji] T:ec[bj]
drop T:ec[bj], K:eacc[bqji]
load Ym1[pq]
.R:ac[pi] -= Ym1[pq] STIN0001aa[qi]
drop Ym1[pq]
drop STIN0001aa[qi]
alloc STIN0001aaaa[pqri], STIN0001abba[pqri]
load K:eaaa[bqpr], T:ec[bi]
.STIN0001aaaa[pqri] += (K:eaaa[bqpr] - K:eaaa[bpqr]) T:ec[bi]
drop T:ec[bi], K:eaaa[bqpr]
load K:eaaa[bqpr], T:ec[bi]
.STIN0001abba[pqri] += K:eaaa[bqpr] T:ec[bi]
drop T:ec[bi], K:eaaa[bqpr]
load Ym1[rq]
.R:ac[pi] += Ym1[rq] STIN0001aaaa[pqri]
drop Ym1[rq]
load Ym1[rq]
.R:ac[pi] += Ym1[rq] STIN0001abba[pqri]
drop Ym1[rq]
drop STIN0001abba[pqri], STIN0001aaaa[pqri]
alloc STIN0001aaaa[pqri], STIN0001abba[pqri]
load K:eaac[bqpi], T:ea[br]
.STIN0001aaaa[pqri] += (K:eaac[bqpi] - K:eaac[bpqi]) T:ea[br]
drop T:ea[br], K:eaac[bqpi]
load K:eaac[bpqi], T:ea[br]
.STIN0001abba[pqri] -= K:eaac[bpqi] T:ea[br]
drop T:ea[br], K:eaac[bpqi]
load Ym1[rq]
.R:ac[pi] -= Ym1[rq] STIN0001aaaa[pqri]
drop Ym1[rq]
load Ym1[rq]
.R:ac[pi] -= Ym1[rq] STIN0001abba[pqri]
drop Ym1[rq]
drop STIN0001abba[pqri], STIN0001aaaa[pqri]
alloc STIN0001aa[pi]
load K:eeac[cbpj], T:eecc[bcij]
.STIN0001aa[pi] += .5*(K:eeac[cbpj] - K:eeac[bcpj]) (T:eecc[bcij] - T:eecc[cbij])
drop T:eecc[bcij], K:eeac[cbpj]
load K:eeac[bcpj], T:eecc[bcij]
.STIN0001aa[pi] -= .5*K:eeac[bcpj] T:eecc[bcij]
drop T:eecc[bcij], K:eeac[bcpj]
load K:eeac[cbpj], T:eecc[cbij]
.STIN0001aa[pi] -= .5*K:eeac[cbpj] T:eecc[cbij]
drop T:eecc[cbij], K:eeac[cbpj]
.R:ac[pi] -= STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aaaa[pqri], STIN0001abba[pqri]
load K:eeaa[bcpq], T:eeac[bcri]
.STIN0001aaaa[pqri] += .5*(K:eeaa[bcpq] - K:eeaa[bcqp]) (T:eeac[bcri] - T:eeac[cbri])
drop T:eeac[bcri], K:eeaa[bcpq]
load K:eeaa[bcpq], T:eeac[cbri]
.STIN0001abba[pqri] -= .5*K:eeaa[bcpq] T:eeac[cbri]
drop T:eeac[cbri], K:eeaa[bcpq]
load K:eeaa[cbpq], T:eeac[bcri]
.STIN0001abba[pqri] -= .5*K:eeaa[cbpq] T:eeac[bcri]
drop T:eeac[bcri], K:eeaa[cbpq]
load Ym1[rq]
.R:ac[pi] -= Ym1[rq] STIN0001aaaa[pqri]
drop Ym1[rq]
load Ym1[rq]
.R:ac[pi] -= Ym1[rq] STIN0001abba[pqri]
drop Ym1[rq]
drop STIN0001abba[pqri], STIN0001aaaa[pqri]
alloc STIN0001aa[pi]
load f:cc[ji], T:ac[pj]
.STIN0001aa[pi] += f:cc[ji] T:ac[pj]
drop T:ac[pj], f:cc[ji]
.R:ac[pi] -= STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aa[qi]
load f:cc[ji], T:ac[qj]
.STIN0001aa[qi] += f:cc[ji] T:ac[qj]
drop T:ac[qj], f:cc[ji]
load Ym1[pq]
.R:ac[pi] += Ym1[pq] STIN0001aa[qi]
drop Ym1[pq]
drop STIN0001aa[qi]
alloc STIN0001aa[pq]
load f:aa[pq]
.STIN0001aa[pq] += f:aa[pq]
drop f:aa[pq]
load T:ac[qi]
.R:ac[pi] += STIN0001aa[pq] T:ac[qi]
drop T:ac[qi]
drop STIN0001aa[pq]
alloc STIN0001aa[pi]
load K:aacc[qpji], J:aacc[pqji], T:ac[qj]
.STIN0001aa[pi] += (K:aacc[qpji] - J:aacc[pqji]) T:ac[qj]
drop T:ac[qj], J:aacc[pqji], K:aacc[qpji]
load K:aacc[pqij], T:ac[qj]
.STIN0001aa[pi] += K:aacc[pqij] T:ac[qj]
drop T:ac[qj], K:aacc[pqij]
.R:ac[pi] += STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aa[qj], STIN0001bb[qj]
load Ym1[qr], T:ac[rj]
.STIN0001aa[qj] += Ym1[qr] T:ac[rj]
drop T:ac[rj], Ym1[qr]
load Ym1[qr], T:ac[rj]
.STIN0001bb[qj] += Ym1[qr] T:ac[rj]
drop T:ac[rj], Ym1[qr]
load K:aacc[qpji], J:aacc[pqji]
.R:ac[pi] -= (K:aacc[qpji] - J:aacc[pqji]) STIN0001aa[qj]
drop J:aacc[pqji], K:aacc[qpji]
load K:aacc[pqij]
.R:ac[pi] -= K:aacc[pqij] STIN0001bb[qj]
drop K:aacc[pqij]
drop STIN0001bb[qj], STIN0001aa[qj]
alloc STIN0001aa[qi]
load K:aacc[rqji], J:aacc[qrji], T:ac[rj]
.STIN0001aa[qi] += (K:aacc[rqji] - J:aacc[qrji]) T:ac[rj]
drop T:ac[rj], J:aacc[qrji], K:aacc[rqji]
load K:aacc[qrij], T:ac[rj]
.STIN0001aa[qi] += K:aacc[qrij] T:ac[rj]
drop T:ac[rj], K:aacc[qrij]
load Ym1[pq]
.R:ac[pi] -= Ym1[pq] STIN0001aa[qi]
drop Ym1[pq]
drop STIN0001aa[qi]
alloc STIN0001aa[ji]
load Ym1[rq], K:aacc[rqji], J:aacc[qrji]
.STIN0001aa[ji] += Ym1[rq] (K:aacc[rqji] - J:aacc[qrji])
drop J:aacc[qrji], K:aacc[rqji], Ym1[rq]
load Ym1[rq], J:aacc[qrji]
.STIN0001aa[ji] -= Ym1[rq] J:aacc[qrji]
drop J:aacc[qrji], Ym1[rq]
load T:ac[pj]
.R:ac[pi] += STIN0001aa[ji] T:ac[pj]
drop T:ac[pj]
drop STIN0001aa[ji]
alloc STIN0001aa[ps]
load Ym1[rq], K:aaaa[pqrs]
.STIN0001aa[ps] += Ym1[rq] (K:aaaa[pqrs] - K:aaaa[qprs])
drop K:aaaa[pqrs], Ym1[rq]
load Ym1[rq], K:aaaa[pqsr]
.STIN0001aa[ps] -= Ym1[rq] K:aaaa[pqsr]
drop K:aaaa[pqsr], Ym1[rq]
load T:ac[si]
.R:ac[pi] -= STIN0001aa[ps] T:ac[si]
drop T:ac[si]
drop STIN0001aa[ps]
alloc STIN0001aa[pi]
load K:eccc[bkji], T:eacc[bpjk]
.STIN0001aa[pi] += .5*(K:eccc[bkji] - K:eccc[bjki]) (T:eacc[bpjk] - T:eacc[bpkj])
drop T:eacc[bpjk], K:eccc[bkji]
load K:eccc[bjki], T:eacc[bpkj]
.STIN0001aa[pi] += .5*K:eccc[bjki] T:eacc[bpkj]
drop T:eacc[bpkj], K:eccc[bjki]
load K:eccc[bkji], T:eacc[bpjk]
.STIN0001aa[pi] += .5*K:eccc[bkji] T:eacc[bpjk]
drop T:eacc[bpjk], K:eccc[bkji]
.R:ac[pi] -= STIN0001aa[pi]
drop STIN0001aa[pi]
alloc STIN0001aa[qi]
load K:eccc[bkji], T:eacc[bqjk]
.STIN0001aa[qi] += .5*(K:eccc[bkji] - K:eccc[bjki]) (T:eacc[bqjk] - T:eacc[bqkj])
drop T:eacc[bqjk], K:eccc[bkji]
load K:eccc[bjki], T:eacc[bqkj]
.STIN0001aa[qi] += .5*K:eccc[bjki] T:eacc[bqkj]
drop T:eacc[bqkj], K:eccc[bjki]
load K:eccc[bkji], T:eacc[bqjk]
.STIN0001aa[qi] += .5*K:eccc[bkji] T:eacc[bqjk]
drop T:eacc[bqjk], K:eccc[bkji]
load Ym1[pq]
.R:ac[pi] += Ym1[pq] STIN0001aa[qi]
drop Ym1[pq]
drop STIN0001aa[qi]
alloc STIN0001aa[pi]
load K:eaca[bpjq], K:eaac[bqpj], T:eacc[bqij]
.STIN0001aa[pi] += (K:eaca[bpjq] - K:eaac[bqpj]) (T:eacc[bqij] - T:eacc[bqji])
drop T:eacc[bqij], K:eaac[bqpj], K:eaca[bpjq]
load K:eaac[bqpj], T:eacc[bqij]
.STIN0001aa[pi] -= K:eaac[bqpj] T:eacc[bqij]
drop T:eacc[bqij], K:eaac[bqpj]
load K:eaca[bpjq], T:eacc[bqji]
.STIN0001aa[pi] -= K:eaca[bpjq] T:eacc[bqji]
drop T:eacc[bqji], K:eaca[bpjq]
.R:ac[pi] -= STIN0001aa[pi]
drop STIN0001aa[pi]
store R:ac[pi]

alloc ECC[]
alloc STIN0001[]
load f:ec[ai], T:ec[ai]
.STIN0001[] += 2.*f:ec[ai] T:ec[ai]
drop T:ec[ai], f:ec[ai]
.ECC[] += STIN0001[]
drop STIN0001[]
alloc STIN0001aa[pq]
load K:eaca[apiq], K:eaac[aqpi], T:ec[ai]
.STIN0001aa[pq] += (K:eaca[apiq] - K:eaac[aqpi]) T:ec[ai]
drop T:ec[ai], K:eaac[aqpi], K:eaca[apiq]
load K:eaca[apiq], T:ec[ai]
.STIN0001aa[pq] += K:eaca[apiq] T:ec[ai]
drop T:ec[ai], K:eaca[apiq]
load Ym1[qp]
.ECC[] += 2.*Ym1[qp] STIN0001aa[pq]
drop Ym1[qp]
drop STIN0001aa[pq]
alloc STIN0001aa[pq]
load f:ea[ap], T:ea[aq]
.STIN0001aa[pq] += f:ea[ap] T:ea[aq]
drop T:ea[aq], f:ea[ap]
load Ym1[qp]
.ECC[] += 2.*Ym1[qp] STIN0001aa[pq]
drop Ym1[qp]
drop STIN0001aa[pq]
alloc STIN0001[]
load f:ac[pi], T:ac[pi]
.STIN0001[] += 2.*f:ac[pi] T:ac[pi]
drop T:ac[pi], f:ac[pi]
.ECC[] += STIN0001[]
drop STIN0001[]
alloc STIN0001aa[qp]
load f:ac[pi], T:ac[qi]
.STIN0001aa[qp] += f:ac[pi] T:ac[qi]
drop T:ac[qi], f:ac[pi]
load Ym1[pq]
.ECC[] -= 2.*Ym1[pq] STIN0001aa[qp]
drop Ym1[pq]
drop STIN0001aa[qp]
alloc STIN0001aa[pq]
load K:aaac[pqri], T:ac[ri]
.STIN0001aa[pq] += (K:aaac[pqri] - K:aaac[prqi]) T:ac[ri]
drop T:ac[ri], K:aaac[pqri]
load K:aaac[prqi], T:ac[ri]
.STIN0001aa[pq] -= K:aaac[prqi] T:ac[ri]
drop T:ac[ri], K:aaac[prqi]
load Ym1[qp]
.ECC[] -= 2.*Ym1[qp] STIN0001aa[pq]
drop Ym1[qp]
drop STIN0001aa[pq]
alloc STIN0001[]
load K:eecc[abij], T:eecc[abij]
.STIN0001[] += .5*(K:eecc[abij] - K:eecc[abji]) (T:eecc[abij] - T:eecc[baij])
drop T:eecc[abij], K:eecc[abij]
load K:eecc[abij], T:eecc[abij]
.STIN0001[] += .5*K:eecc[abij] T:eecc[abij]
drop T:eecc[abij], K:eecc[abij]
load K:eecc[baij], T:eecc[baij]
.STIN0001[] += .5*K:eecc[baij] T:eecc[baij]
drop T:eecc[baij], K:eecc[baij]
.ECC[] += STIN0001[]
drop STIN0001[]
alloc STIN0001aa[pq]
load K:eeac[bapi], T:eeac[abqi]
.STIN0001aa[pq] += .5*(K:eeac[bapi] - K:eeac[abpi]) (T:eeac[abqi] - T:eeac[baqi])
drop T:eeac[abqi], K:eeac[bapi]
load K:eeac[abpi], T:eeac[abqi]
.STIN0001aa[pq] -= .5*K:eeac[abpi] T:eeac[abqi]
drop T:eeac[abqi], K:eeac[abpi]
load K:eeac[bapi], T:eeac[baqi]
.STIN0001aa[pq] -= .5*K:eeac[bapi] T:eeac[baqi]
drop T:eeac[baqi], K:eeac[bapi]
load Ym1[qp]
.ECC[] -= 2.*Ym1[qp] STIN0001aa[pq]
drop Ym1[qp]
drop STIN0001aa[pq]
alloc STIN0001[]
load K:eacc[apij], T:eacc[apij]
.STIN0001[] += (K:eacc[apij] - K:eacc[apji]) (T:eacc[apij] - T:eacc[apji])
drop T:eacc[apij], K:eacc[apij]
load K:eacc[apij], T:eacc[apij]
.STIN0001[] += K:eacc[apij] T:eacc[apij]
drop T:eacc[apij], K:eacc[apij]
load K:eacc[apji], T:eacc[apji]
.STIN0001[] += K:eacc[apji] T:eacc[apji]
drop T:eacc[apji], K:eacc[apji]
.ECC[] += STIN0001[]
drop STIN0001[]
alloc STIN0001aa[qp]
load K:eacc[apij], T:eacc[aqij]
.STIN0001aa[qp] += .5*(K:eacc[apij] - K:eacc[apji]) (T:eacc[aqij] - T:eacc[aqji])
drop T:eacc[aqij], K:eacc[apij]
load K:eacc[apji], T:eacc[aqji]
.STIN0001aa[qp] += .5*K:eacc[apji] T:eacc[aqji]
drop T:eacc[aqji], K:eacc[apji]
load K:eacc[apij], T:eacc[aqij]
.STIN0001aa[qp] += .5*K:eacc[apij] T:eacc[aqij]
drop T:eacc[aqij], K:eacc[apij]
load Ym1[pq]
.ECC[] -= 2.*Ym1[pq] STIN0001aa[qp]
drop Ym1[pq]
drop STIN0001aa[qp]
alloc STIN0001aa[pq]
load f:ec[ai], T:eaac[apqi], T:eaca[apiq]
.STIN0001aa[pq] += f:ec[ai] (T:eaac[apqi] - T:eaca[apiq])
drop T:eaca[apiq], T:eaac[apqi], f:ec[ai]
load f:ec[ai], T:eaca[apiq]
.STIN0001aa[pq] -= f:ec[ai] T:eaca[apiq]
drop T:eaca[apiq], f:ec[ai]
load Ym1[qp]
.ECC[] -= 2.*Ym1[qp] STIN0001aa[pq]
drop Ym1[qp]
drop STIN0001aa[pq]
alloc STIN0001aa[pr]
load K:eaca[apiq], K:eaac[aqpi], T:eaac[aqri], T:eaca[aqir]
.STIN0001aa[pr] += (K:eaca[apiq] - K:eaac[aqpi]) (T:eaac[aqri] - T:eaca[aqir])
drop T:eaca[aqir], T:eaac[aqri], K:eaac[aqpi], K:eaca[apiq]
load K:eaac[aqpi], T:eaac[aqri]
.STIN0001aa[pr] -= K:eaac[aqpi] T:eaac[aqri]
drop T:eaac[aqri], K:eaac[aqpi]
load K:eaca[apiq], T:eaca[aqir]
.STIN0001aa[pr] -= K:eaca[apiq] T:eaca[aqir]
drop T:eaca[aqir], K:eaca[apiq]
load Ym1[rp]
.ECC[] -= 2.*Ym1[rp] STIN0001aa[pr]
drop Ym1[rp]
drop STIN0001aa[pr]
store ECC[]


---- code("Generate_Fock_Matrices")
alloc f:ac[**]
load fc:ca[**]
.f:ac[pi] := fc:ca[ip]
drop fc:ca[**]
load deltacc[**], J:ccca[****]
.f:ac[pi] += (2.*J:ccca[jkip] - J:ccca[ikjp]) deltacc[kj]
drop J:ccca[****], deltacc[**]
store f:ac[**]

alloc f:ec[**]
load fc:ec[**]
.f:ec[ai] += fc:ec[ai]
drop fc:ec[**]
load deltacc[**], J:eccc[****]
.f:ec[ai] += (2.*J:eccc[aijk] - J:eccc[ajik]) deltacc[kj]
drop J:eccc[****], deltacc[**]
store f:ec[**]

alloc f:cc[**]
load fc:cc[**]
.f:cc[ij] := fc:cc[ij]
drop fc:cc[**]
load deltacc[**], K:cccc[****]
.f:cc[ij] += (2.*K:cccc[jkil] - K:cccc[jkli]) deltacc[lk]
drop K:cccc[****], deltacc[**]
store f:cc[**]

alloc f:ea[**]
load fc:ea[**]
.f:ea[ap] := fc:ea[ap]
drop fc:ea[**]
load deltacc[**]
load J:eacc[****], J:ecca[****]
.f:ea[ap] += (2.*J:eacc[apij] - J:ecca[ajip])  deltacc[ji]
drop J:ecca[****], J:eacc[****]
drop deltacc[**]
store f:ea[**]

alloc f:ee[**]
load fc:ee[**]
.f:ee[ab] := fc:ee[ab]
drop fc:ee[**]
load deltacc[**]
load J:eecc[****], K:eecc[****]
.f:ee[ab] += (2.*J:eecc[baij] - K:eecc[baji]) deltacc[ji]
drop K:eecc[****], J:eecc[****]
drop deltacc[**]
store f:ee[**]

alloc f:aa[**]
load fc:aa[**]
.f:aa[pq] := fc:aa[pq]
drop fc:aa[**]
load deltacc[**]
load J:ccaa[****], K:ccaa[****]
.f:aa[pq] += (2.*J:ccaa[ijqp] - K:ccaa[jiqp]) deltacc[ji]
drop K:ccaa[****], J:ccaa[****]
drop deltacc[**]
store f:aa[**]

alloc g:ac[**]
load f:ac[**]
.g:ac[pi] := f:ac[pi]
drop f:ac[**]
load J:caaa[****], Dm1[**]
.g:ac[pi] += (J:caaa[ipqr] - .5*J:caaa[irqp]) Dm1[qr]
drop Dm1[**], J:caaa[****]
store g:ac[**]

alloc g:ec[**]
load f:ec[**]
.g:ec[ai] := f:ec[ai]
drop f:ec[**]
load Dm1[**]
load J:ecaa[****], K:ecaa[****]
.g:ec[ai] += (J:ecaa[aipq] - .5*K:ecaa[aipq]) Dm1[pq]
drop K:ecaa[****], J:ecaa[****]
drop Dm1[**]
store g:ec[**]

alloc g:cc[**]
load f:cc[**]
.g:cc[ij] := f:cc[ij]
drop f:cc[**]
load Dm1[**]
load J:ccaa[****], K:ccaa[****]
.g:cc[ij] += (J:ccaa[jipq] - .5*K:ccaa[jiqp]) Dm1[pq]
drop K:ccaa[****], J:ccaa[****]
drop Dm1[**]
store g:cc[**]

alloc g:ea[**]
load f:ea[**]
.g:ea[ap] := f:ea[ap]
drop f:ea[**]
load J:eaaa[****], Dm1[**]
.g:ea[ap] += (J:eaaa[apqr] - .5*J:eaaa[arqp]) Dm1[qr]
drop Dm1[**], J:eaaa[****]
store g:ea[**]

alloc g:ee[**]
load f:ee[**]
.g:ee[ab] := f:ee[ab]
drop f:ee[**]
load Dm1[**]
load J:eeaa[****], K:eeaa[****]
.g:ee[ab] += (J:eeaa[bapq] - .5*K:eeaa[baqp]) Dm1[pq]
drop K:eeaa[****], J:eeaa[****]
drop Dm1[**]
store g:ee[**]

alloc g:aa[**]
load f:aa[**]
.g:aa[pq] := f:aa[pq]
drop f:aa[**]
load Dm1[**]
load K:aaaa[****]
.g:aa[pq] += (K:aaaa[qrps] - .5*K:aaaa[qrsp])  Dm1[rs]
drop K:aaaa[****]
drop Dm1[**]
store g:aa[**]

// Construct active preconditoner blocks
alloc A1[**]
load f:aa[**], Dm1[**], K:aaaa[pqrs]
.A1[pq] += 2.*f:aa[pq]
.A1[ps] -= f:aa[pq] Dm1[qs]
.A1[pq] += K:aaaa[pqrs] Dm1[rs]
drop K:aaaa[pqrs], Dm1[**], f:aa[**]
store A1[**]

alloc A4[**]
load f:aa[**], Dm1[**]
.A4[ps] += f:aa[pq] Dm1[qs]
drop Dm1[**], f:aa[**]
store A4[**]

// Bug in ITF, for R:ac doesn't work with -g:cc[ii], does
// work with + g:cc[ii]. So add minus here...
alloc gminus[**]
load g:cc[**]
.gminus[ij] -= g:cc[ij]
drop g:cc[**]
store gminus[**]


---- code("Update_Amplitudes")
alloc Var1[]

load OR:ac[pi]
load f:aa[pp], f:cc[ii]
denom-scale OR:ac[pi], f:aa[pp] - f:cc[ii]
drop f:cc[ii], f:aa[pp]
alloc OT:ac[pi]
.OT:ac[pi] -= OR:ac[pi]
store OT:ac[pi]
.Var1[] += 2.0*OR:ac[pi] OR:ac[pi]
drop OR:ac[pi]

load OR:ec[ai]
load f:ee[aa], f:cc[ii]
denom-scale OR:ec[ai], f:ee[aa] - f:cc[ii]
drop f:cc[ii], f:ee[aa]
alloc OT:ec[ai]
.OT:ec[ai] -= OR:ec[ai]
store OT:ec[ai]
.Var1[] += 2.0*OR:ec[ai] OR:ec[ai]
drop OR:ec[ai]

load OR:ea[ap]
load f:ee[aa], f:aa[pp]
denom-scale OR:ea[ap], f:ee[aa] - f:aa[pp]
drop f:aa[pp], f:ee[aa]
alloc OT:ea[ap]
// sign flip as R is formally {V}{P} while T is {PV}
//.OT:ea[ap] -= OR:ea[ap]
.OT:ea[ap] += OR:ea[ap]
store OT:ea[ap]
.Var1[] += 2.0*OR:ea[ap] OR:ea[ap]
drop OR:ea[ap]

store Var1[]
alloc Var2[]

load OR:aacc[pqij]
load f:aa[pp], f:cc[ii]
denom-scale OR:aacc[pqij], f:aa[pp] + f:aa[qq] - f:cc[ii] - f:cc[jj]
drop f:cc[ii], f:aa[pp]
alloc OT:aacc[pqij]
.OT:aacc[pqij] -= OR:aacc[pqij]
store OT:aacc[pqij]
.Var2[] += (2.0*OR:aacc[pqij] - OR:aacc[qpij]) OR:aacc[pqij]
drop OR:aacc[pqij]

load OR:aaac[pqri]
load f:aa[pp], f:cc[ii]
denom-scale OR:aaac[pqri], f:aa[pp] + f:aa[qq] - f:aa[rr] - f:cc[ii]
drop f:cc[ii], f:aa[pp]
alloc OT:aaac[pqri]
// sign flip as R is formally {V}{VVH} while T is {VVHV}
//.OT:aaac[pqri] -= OR:aaac[pqri]
.OT:aaac[pqri] += OR:aaac[pqri]
store OT:aaac[pqri]
.Var2[] += OR:aaac[pqri] OR:aaac[pqri]
drop OR:aaac[pqri]

load OR:eacc[apij]
load f:ee[aa], f:aa[pp], f:cc[ii]
denom-scale OR:eacc[apij], f:ee[aa] + f:aa[pp] - f:cc[ii] - f:cc[jj]
drop f:cc[ii], f:aa[pp], f:ee[aa]
alloc OT:eacc[apij]
.OT:eacc[apij] -= OR:eacc[apij]
store OT:eacc[apij]
.Var2[] += OR:eacc[apij] OR:eacc[apij]
drop OR:eacc[apij]

load OR:eaac[apqi]
load f:ee[aa], f:aa[pp], f:cc[ii]
denom-scale OR:eaac[apqi], f:ee[aa] + f:aa[pp] - f:aa[qq] - f:cc[ii]
drop f:cc[ii], f:aa[pp], f:ee[aa]
alloc OT:eaac[apqi]
// sign flip as R is formally {V}{PVH} while T is {PVHV}
//.OT:eaac[apqi] -= OR:eaac[apqi]
.OT:eaac[apqi] += OR:eaac[apqi]
store OT:eaac[apqi]
.Var2[] += OR:eaac[apqi] OR:eaac[apqi]
drop OR:eaac[apqi]

load OR:eaaa[apqr]
load f:ee[aa], f:aa[pp]
denom-scale OR:eaaa[apqr], f:ee[aa] + f:aa[pp] - f:aa[qq] - f:aa[rr]
drop f:aa[pp], f:ee[aa]
alloc OT:eaaa[apqr]
.OT:eaaa[apqr] -= OR:eaaa[apqr]
store OT:eaaa[apqr]
.Var2[] += OR:eaaa[apqr] OR:eaaa[apqr]
drop OR:eaaa[apqr]

load OR:eecc[abij]
load f:ee[aa], f:cc[ii]
denom-scale OR:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj]
drop f:cc[ii], f:ee[aa]
alloc OT:eecc[abij]
.OT:eecc[abij] -= OR:eecc[abij]
store OT:eecc[abij]
.Var2[] += (2.0*OR:eecc[abij] - OR:eecc[baij]) OR:eecc[abij]
drop OR:eecc[abij]

load OR:eeac[abpi]
load f:ee[aa], f:aa[pp], f:cc[ii]
denom-scale OR:eeac[abpi], f:ee[aa] + f:ee[bb] - f:aa[pp] - f:cc[ii]
drop f:cc[ii], f:aa[pp], f:ee[aa]
alloc OT:eeac[abpi]
// sign flip as R is formally {V}{PPH} while T is {PPHV}
//.OT:eeac[abpi] -= OR:eeac[abpi]
.OT:eeac[abpi] += OR:eeac[abpi]
store OT:eeac[abpi]
.Var2[] += OR:eeac[abpi] OR:eeac[abpi]
drop OR:eeac[abpi]

load OR:eeaa[abpq]
load f:ee[aa], f:aa[pp]
denom-scale OR:eeaa[abpq], f:ee[aa] + f:ee[bb] - f:aa[pp] - f:aa[qq]
drop f:aa[pp], f:ee[aa]
alloc OT:eeaa[abpq]
.OT:eeaa[abpq] -= OR:eeaa[abpq]
store OT:eeaa[abpq]
.Var2[] += (2.0*OR:eeaa[abpq] - OR:eeaa[bapq]) OR:eeaa[abpq]
drop OR:eeaa[abpq]

store Var2[]

// Set up 3rd order denisty and hole tensors
// This is taken from the cic code
---- code("FormDm3OnDisk")
// <E^pqr_stu> += <E^p_s E^q_t R^r_u>
//             -= delta_rs <E^pq_ut>
//             -= delta_rt <E^pq_su>
//             -= delta_qs <E^p_t E^r_u>

alloc Dm3[******]
load deltaaa[**]
load Dm3X[******]
.Dm3[pqruts] += Dm3X[psqtru]
drop Dm3X
load Dm2[****]
.Dm3[pqruts] -= deltaaa[rs] Dm2[pqtu]
.Dm3[pqruts] -= deltaaa[rt] Dm2[pqus]
drop Dm2
load Dm2X[****]
.Dm3[pqruts] -= deltaaa[qs] Dm2X[ptru]
drop Dm2X
drop deltaaa[**]
store Dm3

// also hole dm3
// <E^k_s E^l_t E^m_u E^r_m E^q_l E^p_k> = HDm3[sturqp]
//          + <E^k_s E^p_k E^l_t E^q_l E^m_u E^r_m>
//          - delta_pu <E^m_s E^l_t E^q_l E^r_m>
//          - delta_pt <E^l_s E^m_u E^r_m E^q_l>
//          - delta_qu <E^k_s E^p_k E^m_t E^r_m>

alloc Dm3H[******]
load deltaaa[**]
load Dm3HX[******]
.Dm3H[sturqp] += Dm3HX[sptqur]
drop Dm3HX
load Dm2H[****]
.Dm3H[sturqp] -= deltaaa[pu] Dm2H[stqr]
.Dm3H[sturqp] -= deltaaa[pt] Dm2H[surq]
drop Dm2H
load Dm2HX[****]
.Dm3H[sturqp] -= deltaaa[qu] Dm2HX[sptr]
drop Dm2HX
drop deltaaa[**]
store Dm3H

alloc Ym1[pq]
load Dm1[pq]
.Ym1[pq] += .5*Dm1[pq]
drop Dm1[pq]
store Ym1[pq]


---- code("MRCC_SBlock")
// Set up overlap metric, ready to construct X used
// in sequential orthogonalisation

// I1
alloc S1:I1[pq]
load Dm1H[pq]
.S1:I1[pq] := Dm1H[pq]
drop Dm1H[pq]
store S1:I1[pq]

alloc S2:I1[pqrstu]
load Dm3[pppppp], Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:I1[pqrstu] := Dm3[pqrstu]
.S2:I1[pqrstu] -= deltaaa[pt] Dm2[rqsu]
.S2:I1[pqrstu] += deltaaa[pu] Dm2[rqst]
.S2:I1[pqrstu] += deltaaa[qt] Dm2[rpsu]
.S2:I1[pqrstu] -= deltaaa[qu] Dm2[rpst]
alloc delta4[pppp]
.delta4[pqtu] += deltaaa[pt] deltaaa[qu]
.S2:I1[pqrstu] += delta4[pqtu] Dm1[rs]
.S2:I1[pqrstu] -= delta4[qptu] Dm1[rs]
drop delta4[pppp]
drop deltaaa[pp], Dm1[pp], Dm2[pppp], Dm3[pppppp]
store S2:I1[pqrstu]

alloc S3:I1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S3:I1[pqrs] -= Dm2[qprs]
.S3:I1[pqrs] -= deltaaa[pr] Dm1[qs]
.S3:I1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S3:I1[pqrs]

// I2
alloc S2:I2[pqrs]
load Dm2H[pppp]
.S2:I2[pqrs] := Dm2H[pqrs]
drop Dm2H[pppp]
store S2:I2[pqrs]

// S0
alloc S1:S0[pq]
load Dm1[pp]
.S1:S0[pq] := Dm1[pq]
drop Dm1[pp]
store S1:S0[pq]

alloc S2:S0[pqrstu]
load Dm3[pppppp], Dm2[pppp], deltaaa[pp]
.S2:S0[pqrstu] -= Dm3[pqrstu]
.S2:S0[pqrstu] += deltaaa[pu] Dm2[qrst]
drop deltaaa[pp], Dm2[pppp], Dm3[pppppp]
store S2:S0[pqrstu]

alloc S3:S0[pqrs]
load Dm2[pppp]
.S3:S0[pqrs] := Dm2[pqsr]
drop Dm2[pppp]
store S3:S0[pqrs]

// S1
alloc S2:S1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:S1[pqrs] -= Dm2[qprs]
.S2:S1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S2:S1[pqrs]

alloc S3:S1[pq]
load Dm1[pp]
.S3:S1[pq] := Dm1[qp]
drop Dm1[pp]
store S3:S1[pq]

// S2
alloc S2:S2[pq]
load Dm1H[pq]
.S2:S2[pq] := Dm1H[pq]
drop Dm1H[pq]
store S2:S2[pq]

// P0
alloc S2:P0[pqrs]
load Dm2[pppp]
.S2:P0[pqrs] := Dm2[pqrs]
drop Dm2[pppp]
store S2:P0[pqrs]

// P1
alloc S2:P1[pq]
load Dm1[pp]
.S2:P1[pq] := Dm1[pq]
drop Dm1[pp]
store S2:P1[pq]

---- code("Transform_Residual")
// I1
alloc OR:ac[pi]
load R:ac[pi], S1:I1[pq]
.OR:ac[qi] += R:ac[pi] S1:I1[pq]
drop S1:I1[pq], R:ac[pi]
store OR:ac[pi]

alloc OR:aaac[pqri]
load R:aaac[pqri], S2:I1[pqrstu]
.OR:aaac[stui] += R:aaac[pqri] S2:I1[pqrstu]
drop S2:I1[pqrstu], R:aaac[pqri]
store OR:aaac[pqri]

// I2
alloc OR:aacc[pqij]
load R:aacc[pqij], S2:I2[pqrs]
.OR:aacc[rsij] += R:aacc[pqij] S2:I2[pqrs]
drop S2:I2[pqrs], R:aacc[pqij]
store OR:aacc[pqij]

// S0
alloc OR:ea[ap]
load R:ea[ap], S1:S0[pq]
.OR:ea[aq] += R:ea[ap] S1:S0[pq]
drop S1:S0[pq], R:ea[ap]
store OR:ea[ap]

// S1
alloc OR:eaca[apiq]
load R:eaca[apiq], S2:S1[pqrs]
.OR:eaca[aris] += R:eaca[apiq] S2:S1[pqrs]
drop S2:S1[pqrs], R:eaca[apiq]
store OR:eaca[apiq]

alloc OR:eaac[apqi]
load R:eaac[apqi], S2:S1[pqrs]
.OR:eaac[arsi] += R:eaac[apqi] S2:S1[pqrs]
drop S2:S1[pqrs], R:eaac[apqi]
store OR:eaac[apqi]

// S2
alloc OR:eacc[apij]
load R:eacc[apij], S2:S2[pq]
.OR:eacc[aqij] += R:eacc[apij] S2:S2[pq]
drop S2:S2[pq], R:eacc[apij]
store OR:eacc[apij]

// P0
alloc OR:eeaa[abpq]
load R:eeaa[abpq], S2:P0[pqrs]
.OR:eeaa[abrs] += R:eeaa[abpq] S2:P0[pqrs]
drop S2:P0[pqrs], R:eeaa[abpq]
store OR:eeaa[abpq]

// P1
alloc OR:eeac[abpi]
load R:eeac[abpi], S2:P1[pq]
.OR:eeac[abqi] += R:eeac[abpi] S2:P1[pq]
drop S2:P1[pq], R:eeac[abpi]
store OR:eeac[abpi]


---- code("Create_Amplitude_Update")
alloc Var1[]

load OR:ac[pi]
load A1[pp], gminus[ii]
denom-scale OR:ac[pi], A1[pp] + gminus[ii]
drop gminus[ii], A1[pp]
alloc OT:ac[pi]
.OT:ac[pi] -= OR:ac[pi]
store OT:ac[pi]
.Var1[] += 2.0*OR:ac[pi] OR:ac[pi]
store OR:ac[pi]

load OR:ea[ap]
load g:ee[aa], A4[pp]
denom-scale OR:ea[ap], g:ee[aa] - A4[pp]
drop A4[pp], g:ee[aa]
alloc OT:ea[ap]
// sign flip as R is formally {V}{P} while T is {PV}
//.OT:ea[ap] -= OR:ea[ap]
.OT:ea[ap] += OR:ea[ap]
store OT:ea[ap]
.Var1[] += 2.0*OR:ea[ap] OR:ea[ap]
store OR:ea[ap]

store Var1[]

alloc Var2[]
load OR:aacc[pqij]
load A1[pp], g:cc[ii]
denom-scale OR:aacc[pqij], A1[pp] + A1[qq] - g:cc[ii] - g:cc[jj]
drop g:cc[ii], A1[pp]
alloc OT:aacc[pqij]
.OT:aacc[pqij] -= OR:aacc[pqij]
store OT:aacc[pqij]
.Var2[] += (2.0*OR:aacc[pqij] - OR:aacc[qpij]) OR:aacc[pqij]
drop OR:aacc[pqij]

load OR:aaac[pqri]
load g:aa[pp], g:cc[ii]
denom-scale OR:aaac[pqri], g:aa[pp] + g:aa[qq] - g:aa[rr] - g:cc[ii]
drop g:cc[ii], g:aa[pp]
alloc OT:aaac[pqri]
// sign flip as R is formally {V}{VVH} while T is {VVHV}
//.OT:aaac[pqri] -= OR:aaac[pqri]
.OT:aaac[pqri] += OR:aaac[pqri]
store OT:aaac[pqri]
.Var2[] += OR:aaac[pqri] OR:aaac[pqri]
drop OR:aaac[pqri]

load OR:eacc[apij]
load g:ee[aa], A1[pp], g:cc[ii]
denom-scale OR:eacc[apij], g:ee[aa] + A1[pp] - g:cc[ii] - g:cc[jj]
drop g:cc[ii], A1[pp], g:ee[aa]
alloc OT:eacc[apij]
.OT:eacc[apij] -= OR:eacc[apij]
store OT:eacc[apij]
.Var2[] += OR:eacc[apij] OR:eacc[apij]
drop OR:eacc[apij]

load OR:eaac[apqi]
load g:ee[aa], gminus[ii]
denom-scale OR:eaac[apqi], g:ee[aa] + gminus[ii]
drop gminus[ii], g:ee[aa]
alloc OT:eaac[apqi]
// sign flip as R is formally {V}{PVH} while T is {PVHV}
//.OT:eaac[apqi] -= OR:eaac[apqi]
.OT:eaac[apqi] += OR:eaac[apqi]
store OT:eaac[apqi]
.Var2[] += OR:eaac[apqi] OR:eaac[apqi]
drop OR:eaac[apqi]

load OR:eaca[apiq]
load g:ee[aa], gminus[ii]
denom-scale OR:eaca[apiq], g:ee[aa] + gminus[ii]
drop gminus[ii], g:ee[aa]
alloc OT:eaca[apiq]
.OT:eaca[apiq] -= OR:eaca[apiq]
store OT:eaca[apiq]
.Var2[] += OR:eaca[apiq] OR:eaca[apiq]
drop OR:eaca[apiq]

load OR:eaaa[apqr]
load g:ee[aa], g:aa[pp]
denom-scale OR:eaaa[apqr], g:ee[aa] + g:aa[pp] - g:aa[qq] - g:aa[rr]
drop g:aa[pp], g:ee[aa]
alloc OT:eaaa[apqr]
.OT:eaaa[apqr] -= OR:eaaa[apqr]
store OT:eaaa[apqr]
.Var2[] += OR:eaaa[apqr] OR:eaaa[apqr]
drop OR:eaaa[apqr]

load OR:eeac[abpi]
load g:ee[aa], g:cc[ii], A4[pp]
denom-scale OR:eeac[abpi], g:ee[aa] + g:ee[bb] - A4[pp] - g:cc[ii]
drop A4[pp], g:cc[ii], g:ee[aa]
alloc OT:eeac[abpi]
// sign flip as R is formally {V}{PPH} while T is {PPHV}
//.OT:eeac[abpi] -= OR:eeac[abpi]
.OT:eeac[abpi] += OR:eeac[abpi]
store OT:eeac[abpi]
.Var2[] += OR:eeac[abpi] OR:eeac[abpi]
store OR:eeac[abpi]

load OR:eeaa[abpq]
load g:ee[aa], g:aa[pp]
denom-scale OR:eeaa[abpq], g:ee[aa] + g:ee[bb] - g:aa[pp] - g:aa[qq]
drop g:aa[pp], g:ee[aa]
alloc OT:eeaa[abpq]
.OT:eeaa[abpq] -= OR:eeaa[abpq]
store OT:eeaa[abpq]
.Var2[] += (2.0*OR:eeaa[abpq] - OR:eeaa[bapq]) OR:eeaa[abpq]
drop OR:eeaa[abpq]


store Var2[]


---- code("Construct_GS_Overlap")
// Construct overlap blocks of S1 and S2 parts which
// don't involve orthogonalisation to S1 parts

// I1
alloc S1:I1[pq]
load Dm1H[pq]
.S1:I1[pq] := Dm1H[pq]
drop Dm1H[pq]
store S1:I1[pq]

// S0
alloc S1:S0[pq]
load Dm1[pp]
.S1:S0[pq] := Dm1[pq]
drop Dm1[pp]
store S1:S0[pq]

// I2
alloc S2:I2[pqrs]
load Dm2H[pppp]
.S2:I2[pqrs] := Dm2H[pqrs]
drop Dm2H[pppp]
store S2:I2[pqrs]

// S2
alloc S2:S2[pq]
load Dm1H[pq]
.S2:S2[pq] := Dm1H[pq]
drop Dm1H[pq]
store S2:S2[pq]

// P0
alloc S2:P0[pqrs]
load Dm2[pppp]
.S2:P0[pqrs] := Dm2[pqrs]
drop Dm2[pppp]
store S2:P0[pqrs]

// P1
alloc S2:P1[pq]
load Dm1[pp]
.S2:P1[pq] := Dm1[pq]
drop Dm1[pp]
store S2:P1[pq]


---- code("Construct_S2")
// Set up overlap metric, ready to construct X used
// in sequential orthogonalisation

// I1
alloc S2:I1[pqrstu]
load Dm3[pppppp], Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:I1[pqrstu] := Dm3[pqrstu]
.S2:I1[pqrstu] -= deltaaa[pt] Dm2[rqsu]
.S2:I1[pqrstu] += deltaaa[pu] Dm2[rqst]
.S2:I1[pqrstu] += deltaaa[qt] Dm2[rpsu]
.S2:I1[pqrstu] -= deltaaa[qu] Dm2[rpst]
alloc delta4[pppp]
.delta4[pqtu] += deltaaa[pt] deltaaa[qu]
.S2:I1[pqrstu] += delta4[pqtu] Dm1[rs]
.S2:I1[pqrstu] -= delta4[qptu] Dm1[rs]
drop delta4[pppp]
drop deltaaa[pp], Dm1[pp], Dm2[pppp], Dm3[pppppp]
store S2:I1[pqrstu]

alloc S3:I1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S3:I1[pqrs] -= Dm2[qprs]
.S3:I1[pqrs] -= deltaaa[pr] Dm1[qs]
.S3:I1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S3:I1[pqrs]

//// I2
//alloc S2:I2[pqrs]
//load Dm2H[pppp]
//.S2:I2[pqrs] := Dm2H[pqrs]
//drop Dm2H[pppp]
//store S2:I2[pqrs]

// S0
alloc S2:S0[pqrstu]
load Dm3[pppppp], Dm2[pppp], deltaaa[pp]
.S2:S0[pqrstu] -= Dm3[pqrstu]
.S2:S0[pqrstu] += deltaaa[pu] Dm2[qrst]
drop deltaaa[pp], Dm2[pppp], Dm3[pppppp]
store S2:S0[pqrstu]

alloc S3:S0[pqrs]
load Dm2[pppp]
.S3:S0[pqrs] := Dm2[pqsr]
drop Dm2[pppp]
store S3:S0[pqrs]

// S1
alloc S2:S1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:S1[pqrs] -= Dm2[qprs]
.S2:S1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S2:S1[pqrs]

alloc S3:S1[pq]
load Dm1[pp]
.S3:S1[pq] := Dm1[qp]
drop Dm1[pp]
store S3:S1[pq]

//// S2
//alloc S2:S2[pq]
//load Dm1H[pq]
//.S2:S2[pq] := Dm1H[pq]
//drop Dm1H[pq]
//store S2:S2[pq]
//
//// P0
//alloc S2:P0[pqrs]
//load Dm2[pppp]
//.S2:P0[pqrs] := Dm2[pqrs]
//drop Dm2[pppp]
//store S2:P0[pqrs]
//
//// P1
//alloc S2:P1[pq]
//load Dm1[pp]
//.S2:P1[pq] := Dm1[pq]
//drop Dm1[pp]
//store S2:P1[pq]



---- code("Update_Amplitudes")
// I1
alloc Nrm1[]
load T:ac[pi]
load OT:ac[pi], S1:I1[pq]
.T:ac[qi] += OT:ac[pi] S1:I1[pq]
.Nrm1[] += 2.*T:ac[pi] T:ac[pi]
drop S1:I1[pq], OT:ac[pi]
store T:ac[pi]
store Nrm1[]

alloc Nrm2[]
load T:aaac[pqri]
load OT:aaac[pqri], S2:I1[pqrstu]
.T:aaac[stui] += OT:aaac[pqri] S2:I1[pqrstu]
.Nrm2[] += T:aaac[pqri] T:aaac[pqri]
drop S2:I1[pqrstu], OT:aaac[pqri]
store T:aaac[pqri]
store Nrm2[]

// I2
load Nrm2[]
load T:aacc[pqij]
load OT:aacc[pqij], S2:I2[pqrs]
.T:aacc[rsij] += OT:aacc[pqij] S2:I2[pqrs]
.Nrm2[] += (2.*T:aacc[pqij] - T:aacc[pqij]) T:aacc[pqij]
drop S2:I2[pqrs], OT:aacc[pqij]
store T:aacc[pqij]
store Nrm2[]

// S0
load Nrm1[]
load T:ea[ap]
load OT:ea[ap], S1:S0[pq]
.T:ea[aq] += OT:ea[ap] S1:S0[pq]
.Nrm1[] += 2.*T:ea[ap] T:ea[ap]
drop S1:S0[pq], OT:ea[ap]
store T:ea[ap]

// S1

// S2

load Var1[]
load R:ec[ai]
load g:ee[aa], g:cc[ii]
denom-scale R:ec[ai], g:ee[aa] - g:cc[ii]
drop g:cc[ii], g:ee[aa]
load T:ec[ai]
.T:ec[ai] -= R:ec[ai]
.Nrm1[] += 2.*T:ec[ai] T:ec[ai]
store T:ec[ai]
.Var1[] += 2.*R:ec[ai] R:ec[ai]
drop R:ec[ai]
store Var1[]
store Nrm1[]


load Nrm2[]

load T:eaca[apiq]
load OT:eaca[apiq], S2:S1[pqrs]
.T:eaca[aris] += OT:eaca[apiq] S2:S1[prqs]
.Nrm2[] += T:eaca[apiq] T:eaca[apiq]
drop S2:S1[pqrs], OT:eaca[apiq]
store T:eaca[apiq]

load T:eaac[apqi]
load OT:eaac[apqi], S2:S1[pqrs]
.T:eaac[arsi] += OT:eaac[apqi] S2:S1[pqrs]
.Nrm2[] += T:eaac[apqi] T:eaac[apqi]
drop S2:S1[pqrs], OT:eaac[apqi]
store T:eaac[apqi]

load T:eacc[apij]
load OT:eacc[apij], S2:S2[pq]
.T:eacc[aqij] += OT:eacc[apij] S2:S2[pq]
.Nrm2[] += T:eacc[apij] T:eacc[apij]
drop S2:S2[pq], OT:eacc[apij]
store T:eacc[apij]

// P0
load T:eeaa[abpq]
load OT:eeaa[abpq], S2:P0[pqrs]
.T:eeaa[abrs] += OT:eeaa[abpq] S2:P0[pqrs]
.Nrm2[] += (2.*T:eeaa[abpq] - T:eeaa[bapq]) T:eeaa[abpq]
drop S2:P0[pqrs], OT:eeaa[abpq]
store T:eeaa[abpq]

// P1
load T:eeac[abpi]
load OT:eeac[abpi], S2:P1[pq]
.T:eeac[abqi] += OT:eeac[abpi] S2:P1[pq]
.Nrm2[] += T:eeac[abpi] T:eeac[abpi]
drop S2:P1[pq], OT:eeac[abpi]
store T:eeac[abpi]

// P2


load Var2[]
load R:eecc[abij]
load g:ee[aa], g:cc[ii]
denom-scale R:eecc[abij], g:ee[aa] + g:ee[bb] - g:cc[ii] - g:cc[jj]
drop g:cc[ii], g:ee[aa]
load T:eecc[abij]
.T:eecc[abij] -= R:eecc[abij]
.Nrm2[] += (2.*T:eecc[abij] - T:eecc[baij]) T:eecc[abij]
store T:eecc[abij]
.Var2[] += (2.*R:eecc[abij] - R:eecc[baij]) R:eecc[abij]
drop R:eecc[abij]
store Var2[]

store Nrm2[]


---- code("Construct_Projected_S2")
// Set up overlap metric, ready to construct X used
// in sequential orthogonalisation

// I1
alloc S3:I1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S3:I1[pqrs] -= Dm2[qprs]
.S3:I1[pqrs] -= deltaaa[pr] Dm1[qs]
.S3:I1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S3:I1[pqrs]

alloc I1[pqrs], I2[pqrs]
load S1:I1[pq], S3:I1[pqrs]
.I1[pqts] += S3:I1[qpsr] S1:I1[rt]
.I2[pqts] += S3:I1[pqrs] S1:I1[tr]
drop S3:I1[pqrs], S1:I1[pq]
alloc I3[pqrstu]
.I3[pqrstu] += I1[pvst] I2[qrvu]
alloc S2:I1[pqrstu]
load Dm3[pppppp], Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:I1[pqrstu] := Dm3[pqrstu]
.S2:I1[pqrstu] -= deltaaa[pt] Dm2[rqsu]
.S2:I1[pqrstu] += deltaaa[pu] Dm2[rqst]
.S2:I1[pqrstu] += deltaaa[qt] Dm2[rpsu]
.S2:I1[pqrstu] -= deltaaa[qu] Dm2[rpst]
alloc delta4[pppp]
.delta4[pqtu] += deltaaa[pt] deltaaa[qu]
.S2:I1[pqrstu] += delta4[pqtu] Dm1[rs]
.S2:I1[pqrstu] -= delta4[qptu] Dm1[rs]
drop delta4[pppp]
.S2:I1[pqrstu] -= I3[pqrstu]
drop deltaaa[pp], Dm1[pp], Dm2[pppp], Dm3[pppppp]
store S2:I1[pqrstu]
drop I3[pqrstu]
drop I2[pqrs], I1[pqrs]


// S0
alloc S3:S0[pqrs]
load Dm2[pppp]
.S3:S0[pqrs] := Dm2[pqsr]
drop Dm2[pppp]
store S3:S0[pqrs]

//alloc I1[pqrs], I2[pqrs]
//load S1:I1[pq], S3:I1[pqrs]
//.I1[pqts] += S3:I1[qpsr] S1:I1[rt]
//.I2[pqts] += S3:I1[pqrs] S1:I1[tr]
//drop S3:I1[pqrs], S1:I1[pq]
//alloc I3[pqrstu]
//.I3[pqrstu] += I1[pvst] I2[qrvu]

alloc S2:S0[pqrstu]
load Dm3[pppppp], Dm2[pppp], deltaaa[pp]
.S2:S0[pqrstu] -= Dm3[pqrstu]
.S2:S0[pqrstu] += deltaaa[pu] Dm2[qrst]
drop deltaaa[pp], Dm2[pppp], Dm3[pppppp]
store S2:S0[pqrstu]


// S1
alloc S2:S1[pqrs]
load Dm2[pppp], Dm1[pp], deltaaa[pp]
.S2:S1[pqrs] -= Dm2[qprs]
.S2:S1[pqrs] += deltaaa[ps] Dm1[qr]
drop deltaaa[pp], Dm1[pp], Dm2[pppp]
store S2:S1[pqrs]

alloc S3:S1[pq]
load Dm1[pp]
.S3:S1[pq] := Dm1[qp]
drop Dm1[pp]
store S3:S1[pq]
---- end
