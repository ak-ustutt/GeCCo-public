// This ITF algo file was created using the GeCCo ITF translator
// Authors: J.A. Black, A. Koehn

// Created on: 04-03-2021 12:37

---- decl
index-space: ijklmn, Closed  , c
index-space: abcdef, External, e
index-space: CD, Core, C


// K-integral tensors
tensor: K:cccc[klij], K:cccc
tensor: K:eecc[abij], K:eecc

// J-integral tensors
tensor: J:eecc[bckj], J:eecc

// Special integral tensors
tensor: K4E1[abij], K4E1

// Tensor to send to Kext
tensor: INTpp[abij], INTpp

// Fock tensors
tensor: f:cc[kj], f:cc
tensor: f:ee[bc], f:ee

// Amplitude tensors
tensor: T:eecc[abik], T:eecc

// Residual tensors
tensor: R:eecc[abij], R:eecc

// Energy and DIIS scalars
tensor: ECC[], ECC
tensor: EDi2[], EDi2     // Direct 1st order energy
tensor: Nrm2[], Nrm2     // Doubles amplitude norm
tensor: Var2[], Var2     // Doubles residual norm
tensor: EMp2[], EMp2     // MP2 energy
tensor: ERef[], ERef     // Reference energy
tensor: ShiftP[], ShiftP

// Tensors needed to calculate the reference energy
tensor: f:CC[CC],   f:CC
tensor: CoreH[ii],  h:cc
tensor: CoreH[CC],  h:CC
tensor: Delta[ii],  Delta
tensor: DeltaC[CC], DeltaC

// Used in amplitude update
tensor: L2[abij],          !Create{type:plain}
tensor: C[abij],           !Create{type:plain}

// Intermediates
tensor: ITIN[abij],        !Create{type:plain}
tensor: STIN0001bb[lj],    !Create{type:plain}
tensor: STIN0001abab[klij], !Create{type:plain}
tensor: STIN0001baab[klij], !Create{type:plain}
tensor: STIN0001bb[bd],    !Create{type:plain}
tensor: STIN0001aaaa[dali], !Create{type:plain}
tensor: STIN0001baab[dali], !Create{type:plain}
tensor: STIN0001baba[dali], !Create{type:plain}


---- code("Init_Amplitudes")
// Using MP2 amplitudes for starting guess
alloc EMp2[], Nrm2[]
for [i,j]:
   alloc T:eecc[abij]
   load K:eecc[**ij], f:ee[aa], f:cc[ii], f:cc[jj]
   .T:eecc[abij] -= K:eecc[abij]
   denom-scale T:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj]
   .EMp2[] += (2.0*T:eecc[abij] - T:eecc[baij]) K:eecc[abij]
   .Nrm2[] += (2.0*T:eecc[abij] - T:eecc[baij]) T:eecc[abij]
   drop f:cc[jj], f:cc[ii], f:ee[aa], K:eecc[**ij]
   store T:eecc[**ij]
store Nrm2[], EMp2[]


---- code ("Ref_Energy")
alloc ERef[]
// Closed-shell contribution
load f:cc[ii], CoreH[ii], Delta[ii]
.ERef += f:cc[ij] Delta[ij]
.ERef += CoreH[ij] Delta[ij]
drop Delta, CoreH, f:cc

// Core contribution
load f:CC[CC], CoreH[CC], DeltaC[CC]
.ERef += f:CC[CD] DeltaC[CD]
.ERef += CoreH[CD] DeltaC[CD]
drop DeltaC, CoreH, f:CC
store ERef[]




---- code("Update_Kext_Tensor")
// Intermediate to pass to Kext
alloc INTpp[abij]
load T:eecc[abij]
.INTpp[abij] := T:eecc[abij]
drop T:eecc[abij]
store INTpp[abij]


---- code("Residual")
alloc R:eecc[abij]
alloc ITIN[abij]
load K:eecc[abij]
.ITIN[abij] += .5*K:eecc[abij]
drop K:eecc[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load f:cc[kj], T:eecc[abik]
.ITIN[abij] -= f:cc[kj] T:eecc[abik]
drop T:eecc[abik], f:cc[kj]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load f:ee[bc], T:eecc[acij]
.ITIN[abij] += f:ee[bc] T:eecc[acij]
drop T:eecc[acij], f:ee[bc]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load K:cccc[klij], T:eecc[abkl]
.ITIN[abij] += .25*K:cccc[klij] T:eecc[abkl]
drop T:eecc[abkl], K:cccc[klij]
load K:cccc[lkij], T:eecc[ablk]
.ITIN[abij] += .25*K:cccc[lkij] T:eecc[ablk]
drop T:eecc[ablk], K:cccc[lkij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load K:eecc[cbkj], T:eecc[acik]
.ITIN[abij] += K:eecc[cbkj] (T:eecc[acik] - T:eecc[caik])
drop T:eecc[acik], K:eecc[cbkj]
load K:eecc[cbkj], J:eecc[bckj], T:eecc[acik]
.ITIN[abij] += (K:eecc[cbkj] - J:eecc[bckj]) T:eecc[acik]
drop T:eecc[acik], J:eecc[bckj], K:eecc[cbkj]
load J:eecc[bcki], T:eecc[ackj]
.ITIN[abij] -= J:eecc[bcki] T:eecc[ackj]
drop T:eecc[ackj], J:eecc[bcki]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load K4E1[abij]
.ITIN[abij] += .5*K4E1[abij]
drop K4E1[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc STIN0001bb[lj], ITIN[abij]
load K:eecc[cdkl], T:eecc[cdkj]
.STIN0001bb[lj] -= K:eecc[cdkl] T:eecc[cdkj]
drop T:eecc[cdkj], K:eecc[cdkl]
load K:eecc[dckl], T:eecc[dckj]
.STIN0001bb[lj] -= K:eecc[dckl] T:eecc[dckj]
drop T:eecc[dckj], K:eecc[dckl]
load K:eecc[cdkl], T:eecc[cdjk]
.STIN0001bb[lj] += (K:eecc[cdkl] - K:eecc[cdlk]) (T:eecc[cdjk] - T:eecc[dcjk])
drop T:eecc[cdjk], K:eecc[cdkl]
load T:eecc[abil]
.ITIN[abij] += .5*STIN0001bb[lj] T:eecc[abil]
drop T:eecc[abil]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[lj]
alloc STIN0001abab[klij], STIN0001baab[klij], ITIN[abij]
load K:eecc[cdkl], T:eecc[cdij]
.STIN0001abab[klij] += K:eecc[cdkl] T:eecc[cdij]
drop T:eecc[cdij], K:eecc[cdkl]
load K:eecc[dckl], T:eecc[dcij]
.STIN0001abab[klij] += K:eecc[dckl] T:eecc[dcij]
drop T:eecc[dcij], K:eecc[dckl]
load K:eecc[cdlk], T:eecc[cdij]
.STIN0001baab[klij] -= K:eecc[cdlk] T:eecc[cdij]
drop T:eecc[cdij], K:eecc[cdlk]
load K:eecc[dclk], T:eecc[dcij]
.STIN0001baab[klij] -= K:eecc[dclk] T:eecc[dcij]
drop T:eecc[dcij], K:eecc[dclk]
load T:eecc[abkl]
.ITIN[abij] += .125*STIN0001abab[klij] T:eecc[abkl]
drop T:eecc[abkl]
load T:eecc[ablk]
.ITIN[abij] -= .125*STIN0001baab[klij] T:eecc[ablk]
drop T:eecc[ablk]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baab[klij], STIN0001abab[klij]
alloc STIN0001bb[bd], ITIN[abij]
load K:eecc[cdkl], T:eecc[cbkl]
.STIN0001bb[bd] -= K:eecc[cdkl] T:eecc[cbkl]
drop T:eecc[cbkl], K:eecc[cdkl]
load K:eecc[cdlk], T:eecc[cblk]
.STIN0001bb[bd] -= K:eecc[cdlk] T:eecc[cblk]
drop T:eecc[cblk], K:eecc[cdlk]
load K:eecc[cdkl], T:eecc[bckl]
.STIN0001bb[bd] += (K:eecc[cdkl] - K:eecc[cdlk]) (T:eecc[bckl] - T:eecc[cbkl])
drop T:eecc[bckl], K:eecc[cdkl]
load T:eecc[adij]
.ITIN[abij] += .5*STIN0001bb[bd] T:eecc[adij]
drop T:eecc[adij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001bb[bd]
alloc STIN0001aaaa[dali], STIN0001baab[dali], STIN0001baba[dali], ITIN[abij]
load K:eecc[cdkl], T:eecc[acik]
.STIN0001aaaa[dali] += (K:eecc[cdkl] - K:eecc[cdlk]) (T:eecc[acik] - T:eecc[caik])
drop T:eecc[acik], K:eecc[cdkl]
load K:eecc[dclk], T:eecc[acik]
.STIN0001aaaa[dali] += K:eecc[dclk] T:eecc[acik]
drop T:eecc[acik], K:eecc[dclk]
load K:eecc[dckl], T:eecc[acki]
.STIN0001baab[dali] += K:eecc[dckl] T:eecc[acki]
drop T:eecc[acki], K:eecc[dckl]
load K:eecc[cdkl], T:eecc[acik]
.STIN0001baba[dali] += K:eecc[cdkl] (T:eecc[acik] - T:eecc[caik])
drop T:eecc[acik], K:eecc[cdkl]
load K:eecc[cdkl], T:eecc[acik]
.STIN0001baba[dali] += (K:eecc[cdkl] - K:eecc[cdlk]) T:eecc[acik]
drop T:eecc[acik], K:eecc[cdkl]
load T:eecc[dblj]
.ITIN[abij] += .5*STIN0001aaaa[dali] T:eecc[dblj]
drop T:eecc[dblj]
load T:eecc[bdjl]
.ITIN[abij] += .5*STIN0001baba[dali] (T:eecc[bdjl] - T:eecc[dbjl])
drop T:eecc[bdjl]
load T:eecc[dbil]
.ITIN[abij] += .5*STIN0001baab[dalj] T:eecc[dbil]
drop T:eecc[dbil]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baba[dali], STIN0001baab[dali], STIN0001aaaa[dali]
store R:eecc[abij]

alloc ECC[]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*(K:eecc[abij] - K:eecc[abji]) (T:eecc[abij] - T:eecc[baij])
drop T:eecc[abij], K:eecc[abij]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*K:eecc[abij] T:eecc[abij]
drop T:eecc[abij], K:eecc[abij]
load K:eecc[baij], T:eecc[baij]
.ECC[] += .5*K:eecc[baij] T:eecc[baij]
drop T:eecc[baij], K:eecc[baij]
store ECC[]


---- code("Update_Amplitudes")
// Update doubles
alloc EDi2[], Nrm2[], Var2[]
load R:eecc[abij], K:eecc[abij]
load T:eecc[abij]
load f:ee[aa], f:cc[ii], ShiftP[]
denom-scale R:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj] + ShiftP[]
drop ShiftP[], f:cc[ii], f:ee[aa]

.T:eecc[abij] -= R:eecc[abij]

alloc C[abij]
.C[abij] += T:eecc[abij]
.EDi2 += (2.0*C[abij] - C[baij]) K:eecc[abij]
.Nrm2 += (2.0*C[abij] - C[baij]) C[abij]
drop C[abij]

.Var2 += (2.0*R:eecc[abij] - R:eecc[baij]) R:eecc[abij]

store T:eecc[abij]
drop K:eecc[abij], R:eecc[abij]
store Var2[], Nrm2[], EDi2[]

---- end
