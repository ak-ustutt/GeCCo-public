// This ITF algo file was created using the GeCCo ITF translator
// Author: J.A. Black

// Created on: 21-02-2020 09:30

---- decl
index-space: ijklmn, Closed  , c
index-space: abcdef, External, e
index-space: CD, Core, C


// K-integral tensors
tensor: K:cccc[klij], K:cccc
tensor: K:eecc[abij], K:eecc

// J-integral tensors
tensor: J:eecc[caik], J:eecc

// Special integral tensors
tensor: K4E1:eecc[abij], K4E1:eecc

// Tensor to send to Kext
tensor: INTpp[abij], INTpp

// Fock tensors
tensor: f:cc[ki], f:cc
tensor: f:ee[ac], f:ee

// Amplitude tensors
tensor: T:eecc[abjk], T:eecc

// Residual tensors
tensor: R:eecc[abij], R:eecc

// Energy and DIIS scalars
tensor: ECC[], ECC
tensor: ERef[], ERef     // Reference energy
tensor: EMp2[], EMp2     // MP2 energy
tensor: EDi2[], EDi2     // Direct 1st order energy
tensor: Nrm2[], Nrm2     // Doubles amplitude norm
tensor: Var2[], Var2     // Doubles residual norm

// Tensors needed to calculate the reference energy
tensor: f:CC[CC],   f:CC
tensor: CoreH[ii],  h:cc
tensor: CoreH[CC],  h:CC
tensor: Delta[ii],  Delta
tensor: DeltaC[CC], DeltaC

tensor: ShiftP[], ShiftP

// Intermediates
tensor: ITIN[abij],        !Create{type:plain}
tensor: STIN0001bb[ij],    !Create{type:plain}
tensor: STIN0001abab[ijkl], !Create{type:plain}
tensor: STIN0001baab[ijkl], !Create{type:plain}
tensor: STIN0001aa[ba],    !Create{type:plain}
tensor: STIN0001aaaa[ibaj], !Create{type:plain}
tensor: STIN0001baab[ibaj], !Create{type:plain}
tensor: STIN0001baba[ibaj], !Create{type:plain}

tensor: L2[abij],          !Create{type:plain}
tensor: C[abij],           !Create{type:plain}


---- code("Init_Amplitudes")
// Using MP2 amplitudes for starting guess
alloc EMp2[], Nrm2[]
for [i,j]:
   alloc T:eecc[abij]
   load K:eecc[**ij], f:ee[aa], f:cc[ii], f:cc[jj]
   .T:eecc[abij] -= K:eecc[abij]
   denom-scale T:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj]
   .EMp2[] += (2.0*T:eecc[abij] - T:eecc[baij]) K:eecc[abij]
   .Nrm2[] += (2.0*T:eecc[abij] - T:eecc[baij]) T:eecc[abij]
   drop f:cc[jj], f:cc[ii], f:ee[aa], K:eecc[**ij]
   store T:eecc[**ij]
store Nrm2[], EMp2[]


---- code ("Ref_Energy")
alloc ERef[]
// Closed-shell contribution
load f:cc[ii], CoreH[ii], Delta[ii]
.ERef += f:cc[ij] Delta[ij]
.ERef += CoreH[ij] Delta[ij]
drop Delta, CoreH, f:cc

// Core contribution
load f:CC[CC], CoreH[CC], DeltaC[CC]
.ERef += f:CC[CD] DeltaC[CD]
.ERef += CoreH[CD] DeltaC[CD]
drop DeltaC, CoreH, f:CC
store ERef[]


---- code("Update_Kext_Tensor")
// Intermediate to pass to Kext
alloc INTpp[abij]
load T:eecc[abij]
.INTpp[abij] := T:eecc[abij]
drop T:eecc[abij]
store INTpp[abij]


---- code("Residual")
alloc R:eecc[abij]
alloc ITIN[abij]
load K:eecc[abij]
.ITIN[abij] += .5*K:eecc[abij]
drop K:eecc[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abji]
load f:cc[ki], T:eecc[abjk]
.ITIN[abji] -= f:cc[ki] T:eecc[abjk]
drop T:eecc[abjk], f:cc[ki]
.R:eecc[abji] += ITIN[abji]
.R:eecc[abji] += ITIN[baij]
drop ITIN[abji]
alloc ITIN[abji]
load f:ee[ac], T:eecc[cbji]
.ITIN[abji] += f:ee[ac] T:eecc[cbji]
drop T:eecc[cbji], f:ee[ac]
.R:eecc[abji] += ITIN[abji]
.R:eecc[abji] += ITIN[baij]
drop ITIN[abji]
alloc ITIN[abij]
load K:cccc[klij], T:eecc[abkl]
.ITIN[abij] += .5*K:cccc[klij] T:eecc[abkl]
drop T:eecc[abkl], K:cccc[klij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[abij]
load K:eecc[caki], J:eecc[caik], T:eecc[cbkj]
.ITIN[abij] += (K:eecc[caki] - J:eecc[caik]) T:eecc[cbkj]
drop T:eecc[cbkj], J:eecc[caik], K:eecc[caki]
load K:eecc[acik], T:eecc[bcjk]
.ITIN[abij] += K:eecc[acik] (T:eecc[bcjk] - T:eecc[cbjk])
drop T:eecc[bcjk], K:eecc[acik]
load J:eecc[ackj], T:eecc[cbik]
.ITIN[abij] -= J:eecc[ackj] T:eecc[cbik]
drop T:eecc[cbik], J:eecc[ackj]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
// Replacing line with 4-external integrals
//  .ITIN[abij] += .5*K:eeee[abcd] T:eecc[cdij]
alloc ITIN[abij]
load K4E1:eecc[abij]
.ITIN[abij] += .5*K4E1:eecc[abij]
drop K4E1:eecc[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc STIN0001bb[ij], ITIN[abji]
load K:eecc[abki], T:eecc[abkj]
.STIN0001bb[ij] += .5*K:eecc[abki] T:eecc[abkj]
drop T:eecc[abkj], K:eecc[abki]
load K:eecc[baki], T:eecc[bakj]
.STIN0001bb[ij] += .5*K:eecc[baki] T:eecc[bakj]
drop T:eecc[bakj], K:eecc[baki]
load K:eecc[abki], T:eecc[abkj]
.STIN0001bb[ij] += .5*(K:eecc[abki] - K:eecc[abik]) (T:eecc[abkj] - T:eecc[bakj])
drop T:eecc[abkj], K:eecc[abki]
load T:eecc[abjk]
.ITIN[abji] -= STIN0001bb[ki] T:eecc[abjk]
drop T:eecc[abjk]
.R:eecc[abji] += ITIN[abji]
.R:eecc[abji] += ITIN[baij]
drop ITIN[abji], STIN0001bb[ij]
alloc STIN0001abab[ijkl], STIN0001baab[ijkl], ITIN[abij]
load K:eecc[abij], T:eecc[abkl]
.STIN0001abab[ijkl] += .5*K:eecc[abij] T:eecc[abkl]
drop T:eecc[abkl], K:eecc[abij]
load K:eecc[baij], T:eecc[bakl]
.STIN0001abab[ijkl] += .5*K:eecc[baij] T:eecc[bakl]
drop T:eecc[bakl], K:eecc[baij]
load K:eecc[abji], T:eecc[abkl]
.STIN0001baab[ijkl] -= .5*K:eecc[abji] T:eecc[abkl]
drop T:eecc[abkl], K:eecc[abji]
load K:eecc[baji], T:eecc[bakl]
.STIN0001baab[ijkl] -= .5*K:eecc[baji] T:eecc[bakl]
drop T:eecc[bakl], K:eecc[baji]
load T:eecc[abkl]
.ITIN[abij] += .25*STIN0001abab[klij] T:eecc[abkl]
drop T:eecc[abkl]
load T:eecc[ablk]
.ITIN[abij] -= .25*STIN0001baab[klij] T:eecc[ablk]
drop T:eecc[ablk]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baab[ijkl], STIN0001abab[ijkl]
alloc STIN0001aa[ba], ITIN[abji]
load K:eecc[acji], T:eecc[bcji]
.STIN0001aa[ba] -= .5*(K:eecc[acji] - K:eecc[acij]) (T:eecc[bcji] - T:eecc[cbji])
drop T:eecc[bcji], K:eecc[acji]
load K:eecc[acji], T:eecc[bcji]
.STIN0001aa[ba] -= .5*K:eecc[acji] T:eecc[bcji]
drop T:eecc[bcji], K:eecc[acji]
load K:eecc[acij], T:eecc[bcij]
.STIN0001aa[ba] -= .5*K:eecc[acij] T:eecc[bcij]
drop T:eecc[bcij], K:eecc[acij]
load T:eecc[cbji]
.ITIN[abji] += STIN0001aa[ac] T:eecc[cbji]
drop T:eecc[cbji]
.R:eecc[abji] += ITIN[abji]
.R:eecc[abji] += ITIN[baij]
drop ITIN[abji], STIN0001aa[ba]
alloc STIN0001aaaa[ibaj], STIN0001baab[ibaj], STIN0001baba[ibaj], ITIN[abij]
load K:eecc[acik], T:eecc[bcjk]
.STIN0001aaaa[ibaj] += (K:eecc[acik] - K:eecc[acki]) (T:eecc[bcjk] - T:eecc[cbjk])
drop T:eecc[bcjk], K:eecc[acik]
load K:eecc[acik], T:eecc[bcjk]
.STIN0001aaaa[ibaj] += K:eecc[acik] T:eecc[bcjk]
drop T:eecc[bcjk], K:eecc[acik]
load K:eecc[acki], T:eecc[bckj]
.STIN0001baab[ibaj] += K:eecc[acki] T:eecc[bckj]
drop T:eecc[bckj], K:eecc[acki]
load K:eecc[caki], T:eecc[bcjk]
.STIN0001baba[ibaj] += K:eecc[caki] (T:eecc[bcjk] - T:eecc[cbjk])
drop T:eecc[bcjk], K:eecc[caki]
load K:eecc[acik], T:eecc[bcjk]
.STIN0001baba[ibaj] += (K:eecc[acik] - K:eecc[acki]) T:eecc[bcjk]
drop T:eecc[bcjk], K:eecc[acik]
load T:eecc[cbkj]
.ITIN[abij] += .5*STIN0001aaaa[kaci] T:eecc[cbkj]
drop T:eecc[cbkj]
load T:eecc[bcjk]
.ITIN[abij] += .5*STIN0001baba[kaci] (T:eecc[bcjk] - T:eecc[cbjk])
drop T:eecc[bcjk]
load T:eecc[cbik]
.ITIN[abij] += .5*STIN0001baab[kacj] T:eecc[cbik]
drop T:eecc[cbik]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij], STIN0001baba[ibaj], STIN0001baab[ibaj], STIN0001aaaa[ibaj]
store R:eecc[abij]

alloc ECC[]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*(K:eecc[abij] - K:eecc[abji]) (T:eecc[abij] - T:eecc[baij])
drop T:eecc[abij], K:eecc[abij]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*K:eecc[abij] T:eecc[abij]
drop T:eecc[abij], K:eecc[abij]
load K:eecc[baij], T:eecc[baij]
.ECC[] += .5*K:eecc[baij] T:eecc[baij]
drop T:eecc[baij], K:eecc[baij]
store ECC[]


---- code("Update_Amplitudes")
// Update doubles
alloc EDi2[], Nrm2[], Var2[]
load R:eecc[abij], K:eecc[abij]
load T:eecc[abij]
load f:ee[aa], f:cc[ii], ShiftP[]
denom-scale R:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj] + ShiftP[]
drop ShiftP[], f:cc[ii], f:ee[aa]

.T:eecc[abij] -= R:eecc[abij]

alloc C[abij]
.C[abij] += T:eecc[abij]
.EDi2 += (2.0*C[abij] - C[baij]) K:eecc[abij]
.Nrm2 += (2.0*C[abij] - C[baij]) C[abij]
drop C[abij]

.Var2 += (2.0*R:eecc[abij] - R:eecc[baij]) R:eecc[abij]

store T:eecc[abij]
drop K:eecc[abij], R:eecc[abij]
store Var2[], Nrm2[], EDi2[]
---- end
