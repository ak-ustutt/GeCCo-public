// This ITF algo file was created using the GeCCo ITF translator
// Author: J.A. Black

// Created on: 21-12-2020 12:47

---- decl
index-space: ijklmn, Closed  , c
index-space: abcdef, External, e
index-space: CD, Core, C


// K-integral tensors
tensor: K:cccc[klij], K:cccc
tensor: K:eccc[bjki], K:eccc
tensor: K:eecc[abij], K:eecc
tensor: K:eeec[acbj], K:eeec

// J-integral tensors
tensor: J:eecc[abji], J:eecc

// Special integral tensors
tensor: K4E1[baij], K4E1

// Tensor to send to Kext
tensor: INTpp[abij], INTpp

// Fock tensors
tensor: f:cc[ji], f:cc
tensor: f:ec[ai], f:ec
tensor: f:ee[ab], f:ee

// Amplitude tensors
tensor: T:ec[aj], T:ec
tensor: T:eecc[baji], T:eecc

// Residual tensors
tensor: R:ec[ai], R:ec
tensor: R:eecc[abij], R:eecc

// Energy and DIIS scalars
tensor: ECC[], ECC
tensor: EDi1[], EDi1     // Direct 1st order energy
tensor: Nrm1[], Nrm1     // Singles amplitude norm
tensor: Var1[], Var1     // Singles residual norm
tensor: EDi2[], EDi2     // Direct 1st order energy
tensor: Nrm2[], Nrm2     // Doubles amplitude norm
tensor: Var2[], Var2     // Doubles residual norm
tensor: EMp1[], EMp1     // MP2 energy
tensor: EMp2[], EMp2     // MP2 energy
tensor: ERef[], ERef     // Reference energy

// Tensors needed to calculate the reference energy
tensor: f:CC[CC],   f:CC
tensor: CoreH[ii],  h:cc
tensor: CoreH[CC],  h:CC
tensor: Delta[ii],  Delta
tensor: DeltaC[CC], DeltaC

tensor: ShiftS[], ShiftS
tensor: ShiftP[], ShiftP

// Intermediates
tensor: ITIN[abij],        !Create{type:plain}

tensor: L1[ai],            !Create{type:plain}
tensor: L2[abij],          !Create{type:plain}
tensor: C[abij],           !Create{type:plain}


---- code("Init_Amplitudes")
// Using MP2 amplitudes for starting guess
alloc T:ec[ai], EMp1[], Nrm1[]
load f:ec[ai], f:ee[aa], f:cc[ii]
.T:ec[ai] -= f:ec[ai]
denom-scale T:ec[ai], f:ee[aa] - f:cc[ii]
.EMp1[] += T:ec[ai] f:ec[ai]
.Nrm1[] += 2.0*T:ec[ai] T:ec[ai]
drop f:cc[ii], f:ee[aa], f:ec[ai]
store Nrm1[], EMp1[], T:ec[ai]

alloc EMp2[], Nrm2[]
for [i,j]:
   alloc T:eecc[abij]
   load K:eecc[**ij], f:ee[aa], f:cc[ii], f:cc[jj]
   .T:eecc[abij] -= K:eecc[abij]
   denom-scale T:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj]
   .EMp2[] += (2.0*T:eecc[abij] - T:eecc[baij]) K:eecc[abij]
   .Nrm2[] += (2.0*T:eecc[abij] - T:eecc[baij]) T:eecc[abij]
   drop f:cc[jj], f:cc[ii], f:ee[aa], K:eecc[**ij]
   store T:eecc[**ij]
store Nrm2[], EMp2[]


---- code ("Ref_Energy")
alloc ERef[]
// Closed-shell contribution
load f:cc[ii], CoreH[ii], Delta[ii]
.ERef += f:cc[ij] Delta[ij]
.ERef += CoreH[ij] Delta[ij]
drop Delta, CoreH, f:cc

// Core contribution
load f:CC[CC], CoreH[CC], DeltaC[CC]
.ERef += f:CC[CD] DeltaC[CD]
.ERef += CoreH[CD] DeltaC[CD]
drop DeltaC, CoreH, f:CC
store ERef[]


---- code("Update_Kext_Tensor")
// Intermediate to pass to Kext
alloc INTpp[abij]
load T:eecc[abij]
.INTpp[abij] := T:eecc[abij]
drop T:eecc[abij]
store INTpp[abij]


---- code("Residual")
alloc R:ec[ai]
load f:ec[ai]
.R:ec[ai] += f:ec[ai]
drop f:ec[ai]
load f:cc[ji], T:ec[aj]
.R:ec[ai] -= f:cc[ji] T:ec[aj]
drop T:ec[aj], f:cc[ji]
load f:ee[ab], T:ec[bi]
.R:ec[ai] += f:ee[ab] T:ec[bi]
drop T:ec[bi], f:ee[ab]
load J:eecc[abji], K:eecc[abij], T:ec[bj]
.R:ec[ai] -= (J:eecc[abji] - K:eecc[abij]) T:ec[bj]
drop T:ec[bj], K:eecc[abij], J:eecc[abji]
load K:eecc[abij], T:ec[bj]
.R:ec[ai] += K:eecc[abij] T:ec[bj]
drop T:ec[bj], K:eecc[abij]
load f:ec[bj], T:eecc[baji]
.R:ec[ai] += f:ec[bj] (T:eecc[baji] - T:eecc[abji])
drop T:eecc[baji], f:ec[bj]
load f:ec[bj], T:eecc[abij]
.R:ec[ai] += f:ec[bj] T:eecc[abij]
drop T:eecc[abij], f:ec[bj]
load K:eccc[bjki], T:eecc[bajk]
.R:ec[ai] += .5*(K:eccc[bjki] - K:eccc[bkji]) (T:eecc[bajk] - T:eecc[abjk])
drop T:eecc[bajk], K:eccc[bjki]
load K:eccc[bjki], T:eecc[abjk]
.R:ec[ai] -= .5*K:eccc[bjki] T:eecc[abjk]
drop T:eecc[abjk], K:eccc[bjki]
load K:eccc[bkji], T:eecc[abkj]
.R:ec[ai] -= .5*K:eccc[bkji] T:eecc[abkj]
drop T:eecc[abkj], K:eccc[bkji]
for [j]:
    load K:eeec[acbj], T:eecc[bcji]
    .R:ec[ai] += .5*(K:eeec[acbj] - K:eeec[abcj]) (T:eecc[bcji] - T:eecc[cbji])
    drop T:eecc[bcji], K:eeec[acbj]
    load K:eeec[abcj], T:eecc[bcij]
    .R:ec[ai] += .5*K:eeec[abcj] T:eecc[bcij]
    drop T:eecc[bcij], K:eeec[abcj]
    load K:eeec[acbj], T:eecc[cbij]
    .R:ec[ai] += .5*K:eeec[acbj] T:eecc[cbij]
    drop T:eecc[cbij], K:eeec[acbj]
store R:ec[ai]

alloc R:eecc[abij]
alloc ITIN[abij]
load K:eecc[abij]
.ITIN[abij] += .5*K:eecc[abij]
drop K:eecc[abij]
.R:eecc[abij] += ITIN[abij]
.R:eecc[abij] += ITIN[baji]
drop ITIN[abij]
alloc ITIN[baij]
load K:eccc[akji], T:ec[bk]
.ITIN[baij] -= K:eccc[akji] T:ec[bk]
drop T:ec[bk], K:eccc[akji]
.R:eecc[baij] += ITIN[baij]
.R:eecc[baij] += ITIN[abji]
drop ITIN[baij]
alloc ITIN[baji]
for [i]:
    load K:eeec[bcai], T:ec[cj]
    .ITIN[baji] += K:eeec[bcai] T:ec[cj]
    drop T:ec[cj], K:eeec[bcai]
.R:eecc[baji] += ITIN[baji]
.R:eecc[baji] += ITIN[abij]
drop ITIN[baji]
alloc ITIN[baji]
load f:cc[ki], T:eecc[bajk]
.ITIN[baji] -= f:cc[ki] T:eecc[bajk]
drop T:eecc[bajk], f:cc[ki]
.R:eecc[baji] += ITIN[baji]
.R:eecc[baji] += ITIN[abij]
drop ITIN[baji]
alloc ITIN[baij]
load f:ee[ac], T:eecc[bcij]
.ITIN[baij] += f:ee[ac] T:eecc[bcij]
drop T:eecc[bcij], f:ee[ac]
.R:eecc[baij] += ITIN[baij]
.R:eecc[baij] += ITIN[abji]
drop ITIN[baij]
alloc ITIN[baij]
load K:cccc[klij], T:eecc[bakl]
.ITIN[baij] += .25*K:cccc[klij] T:eecc[bakl]
drop T:eecc[bakl], K:cccc[klij]
load K:cccc[lkij], T:eecc[balk]
.ITIN[baij] += .25*K:cccc[lkij] T:eecc[balk]
drop T:eecc[balk], K:cccc[lkij]
.R:eecc[baij] += ITIN[baij]
.R:eecc[baij] += ITIN[abji]
drop ITIN[baij]
alloc ITIN[baji]
load K:eecc[caki], T:eecc[cbkj]
.ITIN[baji] += K:eecc[caki] (T:eecc[cbkj] - T:eecc[bckj])
drop T:eecc[cbkj], K:eecc[caki]
load J:eecc[acki], K:eecc[acik], T:eecc[bcjk]
.ITIN[baji] -= (J:eecc[acki] - K:eecc[acik]) T:eecc[bcjk]
drop T:eecc[bcjk], K:eecc[acik], J:eecc[acki]
load J:eecc[ackj], T:eecc[bcki]
.ITIN[baji] -= J:eecc[ackj] T:eecc[bcki]
drop T:eecc[bcki], J:eecc[ackj]
.R:eecc[baji] += ITIN[baji]
.R:eecc[baji] += ITIN[abij]
drop ITIN[baji]
alloc ITIN[baij]
load K4E1[baij]
.ITIN[baij] += .5*K4E1[baij]
drop K4E1[baij]
.R:eecc[baij] += ITIN[baij]
.R:eecc[baij] += ITIN[abji]
drop ITIN[baij]
store R:eecc[baij]

alloc ECC[]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*(K:eecc[abij] - K:eecc[abji]) (T:eecc[abij] - T:eecc[baij])
drop T:eecc[abij], K:eecc[abij]
load K:eecc[abij], T:eecc[abij]
.ECC[] += .5*K:eecc[abij] T:eecc[abij]
drop T:eecc[abij], K:eecc[abij]
load K:eecc[baij], T:eecc[baij]
.ECC[] += .5*K:eecc[baij] T:eecc[baij]
drop T:eecc[baij], K:eecc[baij]
load f:ec[ai], T:ec[ai]
.ECC[] += 2.*f:ec[ai] T:ec[ai]
drop T:ec[ai], f:ec[ai]
store ECC[]


---- code("Update_Amplitudes")
// Update singles
load R:ec[ai]
load f:ee[aa], f:cc[ii], ShiftS[]
denom-scale R:ec[ai], f:ee[aa] - f:cc[ii] + ShiftS[]
drop ShiftS[], f:cc[ii], f:ee[aa]

alloc EDi1[], Nrm1[], Var1[]
load T:ec[ai], f:ec[ai]
.T:ec[ai] -= R:ec[ai]
.EDi1[] += 2.0*T:ec[ai] f:ec[ai]
.Nrm1[] += 2.0*T:ec[ai] T:ec[ai]
.Var1[] += 2.0*R:ec[ai] R:ec[ai]
drop f:ec[ai]
store T:ec[ai]
store Var1[], Nrm1[], EDi1[]
drop R:ec[ai]

// Update doubles
load T:ec[ai]
alloc EDi2[], Nrm2[], Var2[]
load R:eecc[abij], K:eecc[abij]
load T:eecc[abij]
load f:ee[aa], f:cc[ii], ShiftP[]
denom-scale R:eecc[abij], f:ee[aa] + f:ee[bb] - f:cc[ii] - f:cc[jj] + ShiftP[]
drop ShiftP[], f:cc[ii], f:ee[aa]

.T:eecc[abij] -= R:eecc[abij]

alloc C[abij]
.C[abij] += T:eecc[abij]
.C[abij] += T:ec[ai] T:ec[bj]
.EDi2 += (2.0*C[abij] - C[baij]) K:eecc[abij]
.Nrm2 += (2.0*C[abij] - C[baij]) C[abij]
drop C[abij]

.Var2 += (2.0*R:eecc[abij] - R:eecc[baij]) R:eecc[abij]

store T:eecc[abij]
drop K:eecc[abij], R:eecc[abij]
store Var2[], Nrm2[], EDi2[]
drop T:ec[ai]
---- end
